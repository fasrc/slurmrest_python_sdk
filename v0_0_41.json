{
  "components": {
    "schemas": {
      "v0.0.41_job_alloc_req": {
        "properties": {
          "hetjob": {
            "description": "HetJob description",
            "items": {
              "$ref": "#/components/schemas/v0.0.41_job_desc_msg"
            },
            "type": "array"
          },
          "job": {
            "$ref": "#/components/schemas/v0.0.41_job_desc_msg",
            "description": "Job description"
          }
        },
        "required": [],
        "type": "object"
      },
      "v0.0.41_job_desc_msg": {
        "properties": {
          "account": {
            "description": "Account associated with the job",
            "type": "string"
          },
          "account_gather_frequency": {
            "description": "Job accounting and profiling sampling intervals in seconds",
            "type": "string"
          },
          "admin_comment": {
            "description": "Arbitrary comment made by administrator",
            "type": "string"
          },
          "allocation_node_list": {
            "description": "Local node making the resource allocation",
            "type": "string"
          },
          "allocation_node_port": {
            "description": "Port to send allocation confirmation to",
            "format": "int32",
            "type": "integer"
          },
          "argv": {
            "description": "Arguments to the script",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "array": {
            "description": "Job array index value specification",
            "type": "string"
          },
          "batch_features": {
            "description": "Features required for batch script's node",
            "type": "string"
          },
          "begin_time": {
            "description": "Defer the allocation of the job until the specified time (UNIX timestamp)",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int64",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "burst_buffer": {
            "description": "Burst buffer specifications",
            "type": "string"
          },
          "cluster_constraint": {
            "description": "Required features that a federated cluster must have to have a sibling job submitted to it",
            "type": "string"
          },
          "clusters": {
            "description": "Clusters that a federated job can run on",
            "type": "string"
          },
          "comment": {
            "description": "Arbitrary comment made by user",
            "type": "string"
          },
          "constraints": {
            "description": "Comma separated list of features that are required",
            "type": "string"
          },
          "container": {
            "description": "Absolute path to OCI container bundle",
            "type": "string"
          },
          "container_id": {
            "description": "OCI container ID",
            "type": "string"
          },
          "contiguous": {
            "description": "True if job requires contiguous nodes",
            "type": "boolean"
          },
          "core_specification": {
            "description": "Specialized core count",
            "format": "int32",
            "type": "integer"
          },
          "cpu_binding": {
            "description": "Method for binding tasks to allocated CPUs",
            "type": "string"
          },
          "cpu_binding_flags": {
            "description": "Flags for CPU binding",
            "items": {
              "enum": [
                "CPU_BIND_TO_THREADS",
                "CPU_BIND_TO_CORES",
                "CPU_BIND_TO_SOCKETS",
                "CPU_BIND_TO_LDOMS",
                "CPU_BIND_NONE",
                "CPU_BIND_RANK",
                "CPU_BIND_MAP",
                "CPU_BIND_MASK",
                "CPU_BIND_LDRANK",
                "CPU_BIND_LDMAP",
                "CPU_BIND_LDMASK",
                "VERBOSE",
                "CPU_BIND_ONE_THREAD_PER_CORE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "cpu_frequency": {
            "description": "Requested CPU frequency range <p1>[-p2][:p3]",
            "type": "string"
          },
          "cpus_per_task": {
            "description": "Number of CPUs required by each task",
            "format": "int32",
            "type": "integer"
          },
          "cpus_per_tres": {
            "description": "Semicolon delimited list of TRES=# values values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)",
            "type": "string"
          },
          "crontab": {
            "description": "Specification for scrontab job",
            "properties": {
              "command": {
                "description": "Command to run",
                "type": "string"
              },
              "day_of_month": {
                "description": "Ranged string specifying eligible day of month values (e.g. 0-10,29)",
                "type": "string"
              },
              "day_of_week": {
                "description": "Ranged string specifying eligible day of week values (e.g.0-3,7)",
                "type": "string"
              },
              "flags": {
                "description": "Flags",
                "items": {
                  "enum": [
                    "WILD_MINUTE",
                    "WILD_HOUR",
                    "WILD_DAY_OF_MONTH",
                    "WILD_MONTH",
                    "WILD_DAY_OF_WEEK"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "hour": {
                "description": "Ranged string specifying eligible hour values (e.g. 0-5,23)",
                "type": "string"
              },
              "line": {
                "properties": {
                  "end": {
                    "description": "End of this entry in file",
                    "format": "int32",
                    "type": "integer"
                  },
                  "start": {
                    "description": "Start of this entry in file",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "minute": {
                "description": "Ranged string specifying eligible minute values (e.g. 0-10,50)",
                "type": "string"
              },
              "month": {
                "description": "Ranged string specifying eligible month values (e.g. 0-5,12)",
                "type": "string"
              },
              "specification": {
                "description": "Time specification (* means valid for all allowed values) - minute hour day_of_month month day_of_week",
                "type": "string"
              }
            },
            "required": [],
            "type": "object"
          },
          "current_working_directory": {
            "description": "Working directory to use for the job",
            "type": "string"
          },
          "deadline": {
            "description": "Latest time that the job may start (UNIX timestamp)",
            "format": "int64",
            "type": "integer"
          },
          "delay_boot": {
            "description": "Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification",
            "format": "int32",
            "type": "integer"
          },
          "dependency": {
            "description": "Other jobs that must meet certain criteria before this job can start",
            "type": "string"
          },
          "distribution": {
            "description": "Layout",
            "type": "string"
          },
          "distribution_plane_size": {
            "description": "Plane size specification when distribution specifies plane",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int32",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "end_time": {
            "description": "Expected end time (UNIX timestamp)",
            "format": "int64",
            "type": "integer"
          },
          "environment": {
            "description": "Environment variables to be set for the job",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excluded_nodes": {
            "description": "Comma separated list of nodes that may not be used",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "exclusive": {
            "deprecated": true,
            "items": {
              "enum": [
                "true",
                "false",
                "user",
                "mcs",
                "topo"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "extra": {
            "description": "Arbitrary string used for node filtering if extra constraints are enabled",
            "type": "string"
          },
          "flags": {
            "description": "Job flags",
            "items": {
              "enum": [
                "KILL_INVALID_DEPENDENCY",
                "NO_KILL_INVALID_DEPENDENCY",
                "HAS_STATE_DIRECTORY",
                "TESTING_BACKFILL",
                "GRES_BINDING_ENFORCED",
                "TEST_NOW_ONLY",
                "SEND_JOB_ENVIRONMENT",
                "SPREAD_JOB",
                "PREFER_MINIMUM_NODE_COUNT",
                "JOB_KILL_HURRY",
                "SKIP_TRES_STRING_ACCOUNTING",
                "SIBLING_CLUSTER_UPDATE_ONLY",
                "HETEROGENEOUS_JOB",
                "EXACT_TASK_COUNT_REQUESTED",
                "EXACT_CPU_COUNT_REQUESTED",
                "TESTING_WHOLE_NODE_BACKFILL",
                "TOP_PRIORITY_JOB",
                "ACCRUE_COUNT_CLEARED",
                "GRES_BINDING_DISABLED",
                "JOB_WAS_RUNNING",
                "JOB_ACCRUE_TIME_RESET",
                "CRON_JOB",
                "EXACT_MEMORY_REQUESTED",
                "USING_DEFAULT_ACCOUNT",
                "USING_DEFAULT_PARTITION",
                "USING_DEFAULT_QOS",
                "USING_DEFAULT_WCKEY",
                "DEPENDENT",
                "MAGNETIC",
                "PARTITION_ASSIGNED",
                "BACKFILL_ATTEMPTED",
                "SCHEDULING_ATTEMPTED",
                "STEPMGR_ENABLED"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "group_id": {
            "description": "Group ID of the user that owns the job",
            "type": "string"
          },
          "hetjob_group": {
            "description": "Unique sequence number applied to this component of the heterogeneous job",
            "format": "int32",
            "type": "integer"
          },
          "hold": {
            "description": "Hold (true) or release (false) job",
            "type": "boolean"
          },
          "immediate": {
            "description": "If true, exit if resources are not available within the time period specified",
            "type": "boolean"
          },
          "job_id": {
            "description": "Job ID",
            "format": "int32",
            "type": "integer"
          },
          "kill_on_node_fail": {
            "description": "If true, kill job on node failure",
            "type": "boolean"
          },
          "kill_warning_delay": {
            "description": "Number of seconds before end time to send the warning signal",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int32",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "kill_warning_flags": {
            "description": "Flags related to job signals",
            "items": {
              "enum": [
                "BATCH_JOB",
                "ARRAY_TASK",
                "FULL_STEPS_ONLY",
                "FULL_JOB",
                "FEDERATION_REQUEUE",
                "HURRY",
                "OUT_OF_MEMORY",
                "NO_SIBLING_JOBS",
                "RESERVATION_JOB",
                "VERBOSE",
                "CRON_JOBS",
                "WARNING_SENT"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "kill_warning_signal": {
            "description": "Signal to send when approaching end time (e.g. \"10\" or \"USR1\")",
            "type": "string"
          },
          "licenses": {
            "description": "License(s) required by the job",
            "type": "string"
          },
          "mail_type": {
            "description": "Mail event type(s)",
            "items": {
              "enum": [
                "BEGIN",
                "END",
                "FAIL",
                "REQUEUE",
                "TIME=100%",
                "TIME=90%",
                "TIME=80%",
                "TIME=50%",
                "STAGE_OUT",
                "ARRAY_TASKS",
                "INVALID_DEPENDENCY"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "mail_user": {
            "description": "User to receive email notifications",
            "type": "string"
          },
          "maximum_cpus": {
            "description": "Maximum number of CPUs required",
            "format": "int32",
            "type": "integer"
          },
          "maximum_nodes": {
            "description": "Maximum node count",
            "format": "int32",
            "type": "integer"
          },
          "mcs_label": {
            "description": "Multi-Category Security label on the job",
            "type": "string"
          },
          "memory_binding": {
            "description": "Binding map for map/mask_cpu",
            "type": "string"
          },
          "memory_binding_type": {
            "description": "Method for binding tasks to memory",
            "items": {
              "enum": [
                "NONE",
                "RANK",
                "MAP",
                "MASK",
                "LOCAL",
                "VERBOSE",
                "SORT",
                "PREFER"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "memory_per_cpu": {
            "description": "Minimum memory in megabytes per allocated CPU",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int64",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "memory_per_node": {
            "description": "Minimum memory in megabytes per allocated CPU",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int64",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "memory_per_tres": {
            "description": "Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)",
            "type": "string"
          },
          "minimum_boards_per_node": {
            "description": "Boards per node required",
            "format": "int32",
            "type": "integer"
          },
          "minimum_cpus": {
            "description": "Minimum number of CPUs required",
            "format": "int32",
            "type": "integer"
          },
          "minimum_cpus_per_node": {
            "description": "Minimum number of CPUs per node",
            "format": "int32",
            "type": "integer"
          },
          "minimum_nodes": {
            "description": "Minimum node count",
            "format": "int32",
            "type": "integer"
          },
          "minimum_sockets_per_board": {
            "description": "Sockets per board required",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Job name",
            "type": "string"
          },
          "network": {
            "description": "Network specs for job step",
            "type": "string"
          },
          "nice": {
            "description": "Requested job priority change",
            "format": "int32",
            "type": "integer"
          },
          "nodes": {
            "description": "Node count range specification (e.g. 1-15:4)",
            "type": "string"
          },
          "ntasks_per_tres": {
            "description": "Number of tasks that can access each GPU",
            "format": "int32",
            "type": "integer"
          },
          "open_mode": {
            "description": "Open mode used for stdout and stderr files",
            "items": {
              "enum": [
                "APPEND",
                "TRUNCATE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "overcommit": {
            "description": "Overcommit resources",
            "type": "boolean"
          },
          "oversubscribe": {
            "deprecated": true,
            "type": "boolean"
          },
          "partition": {
            "description": "Partition assigned to the job",
            "type": "string"
          },
          "power_flags": {
            "deprecated": true,
            "items": {},
            "type": "array"
          },
          "prefer": {
            "description": "Comma separated list of features that are preferred but not required",
            "type": "string"
          },
          "priority": {
            "description": "Request specific job priority",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int32",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "profile": {
            "description": "Profile used by the acct_gather_profile plugin",
            "items": {
              "enum": [
                "NOT_SET",
                "NONE",
                "ENERGY",
                "LUSTRE",
                "NETWORK",
                "TASK"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "qos": {
            "description": "Quality of Service assigned to the job",
            "type": "string"
          },
          "reboot": {
            "description": "Node reboot requested before start",
            "type": "boolean"
          },
          "requeue": {
            "description": "Determines whether the job may be requeued",
            "type": "boolean"
          },
          "required_nodes": {
            "description": "Comma separated list of required nodes",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "required_switches": {
            "description": "Maximum number of switches",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int32",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "reservation": {
            "description": "Name of reservation to use",
            "type": "string"
          },
          "reserve_ports": {
            "description": "Port to send various notification msg to",
            "format": "int32",
            "type": "integer"
          },
          "resv_mpi_ports": {
            "description": "Number of reserved communication ports; can only be used if slurmstepd step manager is enabled",
            "format": "int32",
            "type": "integer"
          },
          "rlimits": {
            "properties": {
              "as": {
                "description": "Address space limit.",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "core": {
                "description": "Largest core file that can be created, in bytes.",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "cpu": {
                "description": "Per-process CPU limit, in seconds.",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "data": {
                "description": "Maximum size of data segment, in bytes. ",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "fsize": {
                "description": "Largest file that can be created, in bytes.",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "memlock": {
                "description": "Locked-in-memory address space",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "nofile": {
                "description": "Number of open files.",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "nproc": {
                "description": "Number of processes.",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "rss": {
                "description": "Largest resident set size, in bytes. This affects swapping; processes that are exceeding their resident set size will be more likely to have physical memory taken from them.",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "stack": {
                "description": "Maximum size of stack segment, in bytes.",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              }
            },
            "type": "object"
          },
          "script": {
            "description": "Job batch script; only the first component in a HetJob is populated or honored",
            "type": "string"
          },
          "segment_size": {
            "description": "Segment size for topology/block",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int32",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "selinux_context": {
            "description": "SELinux context",
            "type": "string"
          },
          "shared": {
            "description": "How the job can share resources with other jobs, if at all",
            "items": {
              "enum": [
                "none",
                "oversubscribe",
                "user",
                "mcs",
                "topo"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "site_factor": {
            "description": "Site-specific priority factor",
            "format": "int32",
            "type": "integer"
          },
          "sockets_per_node": {
            "description": "Sockets per node required",
            "format": "int32",
            "type": "integer"
          },
          "spank_environment": {
            "description": "Environment variables for job prolog/epilog scripts as set by SPANK plugins",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "standard_error": {
            "description": "Path to stderr file",
            "type": "string"
          },
          "standard_input": {
            "description": "Path to stdin file",
            "type": "string"
          },
          "standard_output": {
            "description": "Path to stdout file",
            "type": "string"
          },
          "tasks": {
            "description": "Number of tasks",
            "format": "int32",
            "type": "integer"
          },
          "tasks_per_board": {
            "description": "Number of tasks to invoke on each board",
            "format": "int32",
            "type": "integer"
          },
          "tasks_per_core": {
            "description": "Number of tasks to invoke on each core",
            "format": "int32",
            "type": "integer"
          },
          "tasks_per_node": {
            "description": "Number of tasks to invoke on each node",
            "format": "int32",
            "type": "integer"
          },
          "tasks_per_socket": {
            "description": "Number of tasks to invoke on each socket",
            "format": "int32",
            "type": "integer"
          },
          "temporary_disk_per_node": {
            "description": "Minimum tmp disk space required per node",
            "format": "int32",
            "type": "integer"
          },
          "thread_specification": {
            "description": "Specialized thread count",
            "format": "int32",
            "type": "integer"
          },
          "threads_per_core": {
            "description": "Threads per core required",
            "format": "int32",
            "type": "integer"
          },
          "time_limit": {
            "description": "Maximum run time in minutes",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int32",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "time_minimum": {
            "description": "Minimum run time in minutes",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int32",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "tres_bind": {
            "description": "Task to TRES binding directives",
            "type": "string"
          },
          "tres_freq": {
            "description": "TRES frequency directives",
            "type": "string"
          },
          "tres_per_job": {
            "description": "Comma separated list of TRES=# values to be allocated for every job",
            "type": "string"
          },
          "tres_per_node": {
            "description": "Comma separated list of TRES=# values to be allocated for every node",
            "type": "string"
          },
          "tres_per_socket": {
            "description": "Comma separated list of TRES=# values to be allocated for every socket",
            "type": "string"
          },
          "tres_per_task": {
            "description": "Comma separated list of TRES=# values to be allocated for every task",
            "type": "string"
          },
          "user_id": {
            "description": "User ID that owns the job",
            "type": "string"
          },
          "wait_all_nodes": {
            "description": "If true, wait to start until after all nodes have booted",
            "type": "boolean"
          },
          "wait_for_switch": {
            "description": "Maximum time to wait for switches in seconds",
            "format": "int32",
            "type": "integer"
          },
          "wckey": {
            "description": "Workload characterization key",
            "type": "string"
          },
          "x11": {
            "description": "X11 forwarding options",
            "items": {
              "enum": [
                "FORWARD_ALL_NODES",
                "BATCH_NODE",
                "FIRST_NODE",
                "LAST_NODE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "x11_magic_cookie": {
            "description": "Magic cookie for X11 forwarding",
            "type": "string"
          },
          "x11_target_host": {
            "description": "Hostname or UNIX socket if x11_target_port=0",
            "type": "string"
          },
          "x11_target_port": {
            "description": "TCP port",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [],
        "type": "object"
      },
      "v0.0.41_job_submit_req": {
        "properties": {
          "job": {
            "$ref": "#/components/schemas/v0.0.41_job_desc_msg",
            "description": "Job description"
          },
          "jobs": {
            "description": "HetJob description",
            "items": {
              "$ref": "#/components/schemas/v0.0.41_job_desc_msg"
            },
            "type": "array"
          },
          "script": {
            "deprecated": true,
            "description": "Deprecated; Populate script field in jobs[0] or job",
            "type": "string"
          }
        },
        "required": [],
        "type": "object"
      },
      "v0.0.41_kill_jobs_msg": {
        "properties": {
          "account": {
            "description": "Filter jobs to a specific account",
            "type": "string"
          },
          "flags": {
            "description": "Filter jobs according to flags",
            "items": {
              "enum": [
                "BATCH_JOB",
                "ARRAY_TASK",
                "FULL_STEPS_ONLY",
                "FULL_JOB",
                "FEDERATION_REQUEUE",
                "HURRY",
                "OUT_OF_MEMORY",
                "NO_SIBLING_JOBS",
                "RESERVATION_JOB",
                "VERBOSE",
                "CRON_JOBS",
                "WARNING_SENT"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "job_name": {
            "description": "Filter jobs to a specific name",
            "type": "string"
          },
          "job_state": {
            "description": "Filter jobs to a specific state",
            "items": {
              "enum": [
                "PENDING",
                "RUNNING",
                "SUSPENDED",
                "COMPLETED",
                "CANCELLED",
                "FAILED",
                "TIMEOUT",
                "NODE_FAIL",
                "PREEMPTED",
                "BOOT_FAIL",
                "DEADLINE",
                "OUT_OF_MEMORY",
                "LAUNCH_FAILED",
                "REQUEUED",
                "REQUEUE_HOLD",
                "SPECIAL_EXIT",
                "RESIZING",
                "CONFIGURING",
                "COMPLETING",
                "STOPPED",
                "RECONFIG_FAIL",
                "POWER_UP_NODE",
                "REVOKED",
                "REQUEUE_FED",
                "RESV_DEL_HOLD",
                "SIGNALING",
                "STAGE_OUT"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "jobs": {
            "description": "List of jobs to signal",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "nodes": {
            "description": "Filter jobs to a set of nodes",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "partition": {
            "description": "Filter jobs to a specific partition",
            "type": "string"
          },
          "qos": {
            "description": "Filter jobs to a specific QOS",
            "type": "string"
          },
          "reservation": {
            "description": "Filter jobs to a specific reservation",
            "type": "string"
          },
          "signal": {
            "description": "Signal to send to jobs",
            "type": "string"
          },
          "user_id": {
            "description": "Filter jobs to a specific numeric user id",
            "type": "string"
          },
          "user_name": {
            "description": "Filter jobs to a specific user name",
            "type": "string"
          },
          "wckey": {
            "description": "Filter jobs to a specific wckey",
            "type": "string"
          }
        },
        "required": [],
        "type": "object"
      },
      "v0.0.41_openapi_accounts_add_cond_resp": {
        "properties": {
          "account": {
            "description": "Account organization and description",
            "properties": {
              "description": {
                "description": "Arbitrary string describing the account",
                "type": "string"
              },
              "organization": {
                "description": "Organization to which the account belongs",
                "type": "string"
              }
            },
            "required": [],
            "type": "object"
          },
          "association_condition": {
            "description": "CSV list of accounts, association limits and options, CSV list of clusters",
            "properties": {
              "accounts": {
                "description": "CSV accounts list",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "association": {
                "description": "Association limits and options",
                "properties": {
                  "comment": {
                    "description": "Arbitrary comment",
                    "type": "string"
                  },
                  "defaultqos": {
                    "description": "Default QOS",
                    "type": "string"
                  },
                  "fairshare": {
                    "description": "Allocated shares used for fairshare calculation",
                    "format": "int32",
                    "type": "integer"
                  },
                  "grpjobs": {
                    "description": "Maximum number of running jobs in this association and its children",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "grpjobsaccrue": {
                    "description": "Maximum number of pending jobs able to accrue age priority in this association and its children",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "grpsubmitjobs": {
                    "description": "Maximum number of jobs which can be in a pending or running state at any time in this association and its children",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "grptres": {
                    "description": "Maximum number of TRES able to be allocated by running jobs in this association and its children",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "grptresmins": {
                    "description": "Total number of TRES minutes that can possibly be used by past, present and future jobs in this association and its children",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "grptresrunmins": {
                    "description": "Maximum number of TRES minutes able to be allocated by running jobs in this association and its children",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "grpwall": {
                    "description": "Maximum wall clock time in minutes able to be allocated by running jobs in this association and its children",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "maxjobs": {
                    "description": "Maximum number of running jobs per user in this association",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "maxjobsaccrue": {
                    "description": "Maximum number of pending jobs able to accrue age priority at any given time in this association",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "maxsubmitjobs": {
                    "description": "Maximum number of jobs which can be in a pending or running state at any time in this association",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "maxtresminsperjob": {
                    "description": "Maximum number of TRES minutes each job is able to use in this association",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "maxtresperjob": {
                    "description": "Maximum number of TRES each job is able to use in this association",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "maxtrespernode": {
                    "description": "Maximum number of TRES each node is able to use",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "maxtresrunmins": {
                    "description": "Maximum number of TRES minutes able to be allocated by running jobs in this association",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "maxwalldurationperjob": {
                    "description": "Maximum wall clock time each job is able to use in this association",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "minpriothresh": {
                    "description": "Minimum priority required to reserve resources when scheduling",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "parent": {
                    "description": "Name of parent account",
                    "type": "string"
                  },
                  "priority": {
                    "description": "Association priority factor",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "qoslevel": {
                    "description": "List of available QOS names",
                    "items": {
                      "description": "List of QOS names",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [],
                "type": "object"
              },
              "clusters": {
                "description": "CSV clusters list",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "accounts"
            ],
            "type": "object"
          },
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [],
        "type": "object"
      },
      "v0.0.41_openapi_accounts_add_cond_resp_str": {
        "properties": {
          "added_accounts": {
            "description": "added_accounts",
            "type": "string"
          },
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "added_accounts"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_accounts_removed_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "removed_accounts": {
            "description": "removed_accounts",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "removed_accounts"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_accounts_resp": {
        "properties": {
          "accounts": {
            "description": "accounts",
            "items": {
              "properties": {
                "associations": {
                  "description": "Associations involving this account (only populated if requested)",
                  "items": {
                    "properties": {
                      "account": {
                        "description": "Account",
                        "type": "string"
                      },
                      "cluster": {
                        "description": "Cluster",
                        "type": "string"
                      },
                      "id": {
                        "description": "Numeric association ID",
                        "format": "int32",
                        "type": "integer"
                      },
                      "partition": {
                        "description": "Partition",
                        "type": "string"
                      },
                      "user": {
                        "description": "User name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "user"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "coordinators": {
                  "description": "List of users that are a coordinator of this account (only populated if requested)",
                  "items": {
                    "properties": {
                      "direct": {
                        "description": "Indicates whether the coordinator was directly assigned to this account",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "User name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "description": {
                  "description": "Arbitrary string describing the account",
                  "type": "string"
                },
                "flags": {
                  "description": "Flags associated with the account",
                  "items": {
                    "enum": [
                      "DELETED",
                      "WithAssociations",
                      "WithCoordinators",
                      "NoUsersAreCoords",
                      "UsersAreCoords"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Account name",
                  "type": "string"
                },
                "organization": {
                  "description": "Organization to which the account belongs",
                  "type": "string"
                }
              },
              "required": [
                "description",
                "name",
                "organization"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "accounts"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_assocs_removed_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "removed_associations": {
            "description": "removed_associations",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "removed_associations"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_assocs_resp": {
        "properties": {
          "associations": {
            "description": "associations",
            "items": {
              "properties": {
                "account": {
                  "description": "Account",
                  "type": "string"
                },
                "accounting": {
                  "description": "Accounting records containing related resource usage",
                  "items": {
                    "properties": {
                      "TRES": {
                        "description": "Trackable resources",
                        "properties": {
                          "count": {
                            "description": "TRES count (0 if listed generically)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "id": {
                            "description": "ID used in database",
                            "format": "int32",
                            "type": "integer"
                          },
                          "name": {
                            "description": "TRES name (if applicable)",
                            "type": "string"
                          },
                          "type": {
                            "description": "TRES type (CPU, MEM, etc)",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "allocated": {
                        "properties": {
                          "seconds": {
                            "description": "Number of cpu seconds allocated",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "Association ID or Workload characterization key ID",
                        "format": "int32",
                        "type": "integer"
                      },
                      "start": {
                        "description": "When the record was started",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "type": "array"
                },
                "cluster": {
                  "description": "Cluster name",
                  "type": "string"
                },
                "comment": {
                  "description": "Arbitrary comment",
                  "type": "string"
                },
                "default": {
                  "properties": {
                    "qos": {
                      "description": "Default QOS",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "flags": {
                  "description": "Flags on the association",
                  "items": {
                    "enum": [
                      "DELETED",
                      "NoUpdate",
                      "Exact",
                      "NoUsersAreCoords",
                      "UsersAreCoords"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "id": {
                  "description": "Unique ID",
                  "format": "int32",
                  "type": "integer"
                },
                "is_default": {
                  "description": "Is default association for user",
                  "type": "boolean"
                },
                "lineage": {
                  "description": "Complete path up the hierarchy to the root association",
                  "type": "string"
                },
                "max": {
                  "properties": {
                    "jobs": {
                      "properties": {
                        "accruing": {
                          "description": "MaxJobsAccrue",
                          "properties": {
                            "infinite": {
                              "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                              "type": "boolean"
                            },
                            "number": {
                              "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                              "format": "int32",
                              "type": "integer"
                            },
                            "set": {
                              "description": "True if number has been set; False if number is unset",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "active": {
                          "description": "MaxJobs",
                          "properties": {
                            "infinite": {
                              "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                              "type": "boolean"
                            },
                            "number": {
                              "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                              "format": "int32",
                              "type": "integer"
                            },
                            "set": {
                              "description": "True if number has been set; False if number is unset",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "per": {
                          "properties": {
                            "accruing": {
                              "description": "GrpJobsAccrue",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            },
                            "count": {
                              "description": "GrpJobs",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            },
                            "submitted": {
                              "description": "GrpSubmitJobs",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            },
                            "wall_clock": {
                              "description": "MaxWallDurationPerJob",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "total": {
                          "description": "MaxSubmitJobs",
                          "properties": {
                            "infinite": {
                              "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                              "type": "boolean"
                            },
                            "number": {
                              "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                              "format": "int32",
                              "type": "integer"
                            },
                            "set": {
                              "description": "True if number has been set; False if number is unset",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "per": {
                      "properties": {
                        "account": {
                          "properties": {
                            "wall_clock": {
                              "description": "GrpWall",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "tres": {
                      "properties": {
                        "group": {
                          "properties": {
                            "active": {
                              "description": "GrpTRESRunMins",
                              "items": {
                                "properties": {
                                  "count": {
                                    "description": "TRES count (0 if listed generically)",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "ID used in database",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "TRES name (if applicable)",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "TRES type (CPU, MEM, etc)",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "minutes": {
                              "description": "GrpTRESMins",
                              "items": {
                                "properties": {
                                  "count": {
                                    "description": "TRES count (0 if listed generically)",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "ID used in database",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "TRES name (if applicable)",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "TRES type (CPU, MEM, etc)",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "minutes": {
                          "properties": {
                            "per": {
                              "properties": {
                                "job": {
                                  "description": "MaxTRESMinsPerJob",
                                  "items": {
                                    "properties": {
                                      "count": {
                                        "description": "TRES count (0 if listed generically)",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "ID used in database",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "TRES name (if applicable)",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "TRES type (CPU, MEM, etc)",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "total": {
                              "description": "MaxTRESMinsPerJob",
                              "items": {
                                "properties": {
                                  "count": {
                                    "description": "TRES count (0 if listed generically)",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "ID used in database",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "TRES name (if applicable)",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "TRES type (CPU, MEM, etc)",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "per": {
                          "properties": {
                            "job": {
                              "description": "MaxTRESPerJob",
                              "items": {
                                "properties": {
                                  "count": {
                                    "description": "TRES count (0 if listed generically)",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "ID used in database",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "TRES name (if applicable)",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "TRES type (CPU, MEM, etc)",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "node": {
                              "description": "MaxTRESPerNode",
                              "items": {
                                "properties": {
                                  "count": {
                                    "description": "TRES count (0 if listed generically)",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "ID used in database",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "TRES name (if applicable)",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "TRES type (CPU, MEM, etc)",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "total": {
                          "description": "GrpTRES",
                          "items": {
                            "properties": {
                              "count": {
                                "description": "TRES count (0 if listed generically)",
                                "format": "int64",
                                "type": "integer"
                              },
                              "id": {
                                "description": "ID used in database",
                                "format": "int32",
                                "type": "integer"
                              },
                              "name": {
                                "description": "TRES name (if applicable)",
                                "type": "string"
                              },
                              "type": {
                                "description": "TRES type (CPU, MEM, etc)",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "min": {
                  "properties": {
                    "priority_threshold": {
                      "description": "MinPrioThreshold",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "parent_account": {
                  "description": "Name of parent account",
                  "type": "string"
                },
                "partition": {
                  "description": "Partition name",
                  "type": "string"
                },
                "priority": {
                  "description": "Association priority factor",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "qos": {
                  "description": "List of available QOS names",
                  "items": {
                    "description": "List of QOS names",
                    "type": "string"
                  },
                  "type": "array"
                },
                "shares_raw": {
                  "description": "Allocated shares used for fairshare calculation",
                  "format": "int32",
                  "type": "integer"
                },
                "user": {
                  "description": "User name",
                  "type": "string"
                }
              },
              "required": [
                "user"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "associations"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_clusters_removed_resp": {
        "properties": {
          "deleted_clusters": {
            "description": "deleted_clusters",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "deleted_clusters"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_clusters_resp": {
        "properties": {
          "clusters": {
            "description": "clusters",
            "items": {
              "properties": {
                "associations": {
                  "properties": {
                    "root": {
                      "description": "Root association information",
                      "properties": {
                        "account": {
                          "description": "Account",
                          "type": "string"
                        },
                        "cluster": {
                          "description": "Cluster",
                          "type": "string"
                        },
                        "id": {
                          "description": "Numeric association ID",
                          "format": "int32",
                          "type": "integer"
                        },
                        "partition": {
                          "description": "Partition",
                          "type": "string"
                        },
                        "user": {
                          "description": "User name",
                          "type": "string"
                        }
                      },
                      "required": [
                        "user"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "controller": {
                  "properties": {
                    "host": {
                      "description": "ControlHost",
                      "type": "string"
                    },
                    "port": {
                      "description": "ControlPort",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "flags": {
                  "description": "Flags",
                  "items": {
                    "enum": [
                      "REGISTERING",
                      "MULTIPLE_SLURMD",
                      "FRONT_END",
                      "FEDERATION",
                      "EXTERNAL"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "ClusterName",
                  "type": "string"
                },
                "nodes": {
                  "description": "Node names",
                  "type": "string"
                },
                "rpc_version": {
                  "description": "RPC version used in the cluster",
                  "format": "int32",
                  "type": "integer"
                },
                "select_plugin": {
                  "deprecated": true,
                  "type": "string"
                },
                "tres": {
                  "description": "Trackable resources",
                  "items": {
                    "properties": {
                      "count": {
                        "description": "TRES count (0 if listed generically)",
                        "format": "int64",
                        "type": "integer"
                      },
                      "id": {
                        "description": "ID used in database",
                        "format": "int32",
                        "type": "integer"
                      },
                      "name": {
                        "description": "TRES name (if applicable)",
                        "type": "string"
                      },
                      "type": {
                        "description": "TRES type (CPU, MEM, etc)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "clusters"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_diag_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "statistics": {
            "description": "statistics",
            "properties": {
              "agent_count": {
                "description": "Number of agent threads",
                "format": "int32",
                "type": "integer"
              },
              "agent_queue_size": {
                "description": "Number of enqueued outgoing RPC requests in an internal retry list",
                "format": "int32",
                "type": "integer"
              },
              "agent_thread_count": {
                "description": "Total number of active threads created by all agent threads",
                "format": "int32",
                "type": "integer"
              },
              "bf_active": {
                "description": "Backfill scheduler currently running",
                "type": "boolean"
              },
              "bf_backfilled_het_jobs": {
                "description": "Number of heterogeneous job components started through backfilling since last Slurm start",
                "format": "int32",
                "type": "integer"
              },
              "bf_backfilled_jobs": {
                "description": "Number of jobs started through backfilling since last slurm start",
                "format": "int32",
                "type": "integer"
              },
              "bf_cycle_counter": {
                "description": "Number of backfill scheduling cycles since last reset",
                "format": "int32",
                "type": "integer"
              },
              "bf_cycle_last": {
                "description": "Execution time in microseconds of last backfill scheduling cycle",
                "format": "int32",
                "type": "integer"
              },
              "bf_cycle_max": {
                "description": "Execution time in microseconds of longest backfill scheduling cycle",
                "format": "int32",
                "type": "integer"
              },
              "bf_cycle_mean": {
                "description": "Mean time in microseconds of backfilling scheduling cycles since last reset",
                "format": "int64",
                "type": "integer"
              },
              "bf_cycle_sum": {
                "description": "Total time in microseconds of backfilling scheduling cycles since last reset",
                "format": "int64",
                "type": "integer"
              },
              "bf_depth_mean": {
                "description": "Mean number of eligible to run jobs processed during all backfilling scheduling cycles since last reset",
                "format": "int64",
                "type": "integer"
              },
              "bf_depth_mean_try": {
                "description": "The subset of Depth Mean that the backfill scheduler attempted to schedule",
                "format": "int64",
                "type": "integer"
              },
              "bf_depth_sum": {
                "description": "Total number of jobs processed during all backfilling scheduling cycles since last reset",
                "format": "int32",
                "type": "integer"
              },
              "bf_depth_try_sum": {
                "description": "Subset of bf_depth_sum that the backfill scheduler attempted to schedule",
                "format": "int32",
                "type": "integer"
              },
              "bf_exit": {
                "description": "Reasons for which the backfill scheduling cycle exited since last reset",
                "properties": {
                  "bf_max_job_start": {
                    "description": "Reached number of jobs allowed to start",
                    "format": "int32",
                    "type": "integer"
                  },
                  "bf_max_job_test": {
                    "description": "Reached number of jobs allowed to be tested",
                    "format": "int32",
                    "type": "integer"
                  },
                  "bf_max_time": {
                    "description": "Reached maximum allowed scheduler time",
                    "format": "int32",
                    "type": "integer"
                  },
                  "bf_node_space_size": {
                    "description": "Reached table size limit",
                    "format": "int32",
                    "type": "integer"
                  },
                  "end_job_queue": {
                    "description": "Reached end of queue",
                    "format": "int32",
                    "type": "integer"
                  },
                  "state_changed": {
                    "description": "System state changed",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [],
                "type": "object"
              },
              "bf_last_backfilled_jobs": {
                "description": "Number of jobs started through backfilling since last reset",
                "format": "int32",
                "type": "integer"
              },
              "bf_last_depth": {
                "description": "Number of processed jobs during last backfilling scheduling cycle",
                "format": "int32",
                "type": "integer"
              },
              "bf_last_depth_try": {
                "description": "Number of processed jobs during last backfilling scheduling cycle that had a chance to start using available resources",
                "format": "int32",
                "type": "integer"
              },
              "bf_queue_len": {
                "description": "Number of jobs pending to be processed by backfilling algorithm",
                "format": "int32",
                "type": "integer"
              },
              "bf_queue_len_mean": {
                "description": "Mean number of jobs pending to be processed by backfilling algorithm",
                "format": "int64",
                "type": "integer"
              },
              "bf_queue_len_sum": {
                "description": "Total number of jobs pending to be processed by backfilling algorithm since last reset",
                "format": "int32",
                "type": "integer"
              },
              "bf_table_size": {
                "description": "Number of different time slots tested by the backfill scheduler in its last iteration",
                "format": "int32",
                "type": "integer"
              },
              "bf_table_size_mean": {
                "description": "Mean number of different time slots tested by the backfill scheduler",
                "format": "int64",
                "type": "integer"
              },
              "bf_table_size_sum": {
                "description": "Total number of different time slots tested by the backfill scheduler",
                "format": "int32",
                "type": "integer"
              },
              "bf_when_last_cycle": {
                "description": "When the last backfill scheduling cycle happened (UNIX timestamp)",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "dbd_agent_queue_size": {
                "description": "Number of messages for SlurmDBD that are queued",
                "format": "int32",
                "type": "integer"
              },
              "gettimeofday_latency": {
                "description": "Latency of 1000 calls to the gettimeofday() syscall in microseconds, as measured at controller startup",
                "format": "int32",
                "type": "integer"
              },
              "job_states_ts": {
                "description": "When the job state counts were gathered (UNIX timestamp)",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "jobs_canceled": {
                "description": "Number of jobs canceled since the last reset",
                "format": "int32",
                "type": "integer"
              },
              "jobs_completed": {
                "description": "Number of jobs completed since last reset",
                "format": "int32",
                "type": "integer"
              },
              "jobs_failed": {
                "description": "Number of jobs failed due to slurmd or other internal issues since last reset",
                "format": "int32",
                "type": "integer"
              },
              "jobs_pending": {
                "description": "Number of jobs pending at the time of listed in job_state_ts",
                "format": "int32",
                "type": "integer"
              },
              "jobs_running": {
                "description": "Number of jobs running at the time of listed in job_state_ts",
                "format": "int32",
                "type": "integer"
              },
              "jobs_started": {
                "description": "Number of jobs started since last reset",
                "format": "int32",
                "type": "integer"
              },
              "jobs_submitted": {
                "description": "Number of jobs submitted since last reset",
                "format": "int32",
                "type": "integer"
              },
              "parts_packed": {
                "description": "Zero if only RPC statistic included",
                "format": "int32",
                "type": "integer"
              },
              "pending_rpcs": {
                "description": "Pending RPC statistics",
                "items": {
                  "description": "Pending RPCs",
                  "properties": {
                    "count": {
                      "description": "Number of pending RPCs queued",
                      "format": "int32",
                      "type": "integer"
                    },
                    "message_type": {
                      "description": "Message type as string",
                      "type": "string"
                    },
                    "type_id": {
                      "description": "Message type as integer",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "type_id",
                    "message_type",
                    "count"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "pending_rpcs_by_hostlist": {
                "description": "Pending RPCs hostlists",
                "items": {
                  "description": "Pending RPCs by hostlist",
                  "properties": {
                    "count": {
                      "description": "Number of RPCs received",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "message_type": {
                      "description": "Message type as string",
                      "type": "string"
                    },
                    "type_id": {
                      "description": "Message type as integer",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "type_id",
                    "message_type",
                    "count"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "req_time": {
                "description": "When the request was made (UNIX timestamp)",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "req_time_start": {
                "description": "When the data in the report started (UNIX timestamp)",
                "properties": {
                  "infinite": {
                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                    "type": "boolean"
                  },
                  "number": {
                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                    "format": "int64",
                    "type": "integer"
                  },
                  "set": {
                    "description": "True if number has been set; False if number is unset",
                    "type": "boolean"
                  }
                },
                "required": [],
                "type": "object"
              },
              "rpcs_by_message_type": {
                "description": "Most frequently issued remote procedure calls (RPCs)",
                "items": {
                  "description": "RPCs by type",
                  "properties": {
                    "average_time": {
                      "description": "Average time spent processing RPC in seconds",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int64",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "count": {
                      "description": "Number of RPCs received",
                      "format": "int32",
                      "type": "integer"
                    },
                    "cycle_last": {
                      "description": "Number of RPCs processed within the last RPC queue cycle",
                      "format": "int32",
                      "type": "integer"
                    },
                    "cycle_max": {
                      "description": "Maximum number of RPCs processed within a RPC queue cycle since start",
                      "format": "int32",
                      "type": "integer"
                    },
                    "dropped": {
                      "description": "Number of RPCs dropped",
                      "format": "int64",
                      "type": "integer"
                    },
                    "message_type": {
                      "description": "Message type as string",
                      "type": "string"
                    },
                    "queued": {
                      "description": "Number of RPCs queued",
                      "format": "int32",
                      "type": "integer"
                    },
                    "total_time": {
                      "description": "Total time spent processing RPC in seconds",
                      "format": "int64",
                      "type": "integer"
                    },
                    "type_id": {
                      "description": "Message type as integer",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "type_id",
                    "message_type",
                    "count",
                    "queued",
                    "dropped",
                    "cycle_last",
                    "cycle_max",
                    "total_time",
                    "average_time"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "rpcs_by_user": {
                "description": "RPCs issued by user ID",
                "items": {
                  "description": "RPCs by user",
                  "properties": {
                    "average_time": {
                      "description": "Average time spent processing RPC in seconds",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int64",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "count": {
                      "description": "Number of RPCs received",
                      "format": "int32",
                      "type": "integer"
                    },
                    "total_time": {
                      "description": "Total time spent processing RPC in seconds",
                      "format": "int64",
                      "type": "integer"
                    },
                    "user": {
                      "description": "User name",
                      "type": "string"
                    },
                    "user_id": {
                      "description": "User ID (numeric)",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "user_id",
                    "user",
                    "count",
                    "total_time",
                    "average_time"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "schedule_cycle_depth": {
                "description": "Total number of jobs processed in scheduling cycles",
                "format": "int32",
                "type": "integer"
              },
              "schedule_cycle_last": {
                "description": "Time in microseconds for last scheduling cycle",
                "format": "int32",
                "type": "integer"
              },
              "schedule_cycle_max": {
                "description": "Max time of any scheduling cycle in microseconds since last reset",
                "format": "int32",
                "type": "integer"
              },
              "schedule_cycle_mean": {
                "description": "Mean time in microseconds for all scheduling cycles since last reset",
                "format": "int64",
                "type": "integer"
              },
              "schedule_cycle_mean_depth": {
                "description": "Mean of the number of jobs processed in a scheduling cycle",
                "format": "int64",
                "type": "integer"
              },
              "schedule_cycle_per_minute": {
                "description": "Number of scheduling executions per minute",
                "format": "int64",
                "type": "integer"
              },
              "schedule_cycle_sum": {
                "description": "Total run time in microseconds for all scheduling cycles since last reset",
                "format": "int32",
                "type": "integer"
              },
              "schedule_cycle_total": {
                "description": "Number of scheduling cycles since last reset",
                "format": "int32",
                "type": "integer"
              },
              "schedule_exit": {
                "description": "Reasons for which the scheduling cycle exited since last reset",
                "properties": {
                  "default_queue_depth": {
                    "description": "Reached number of jobs allowed to be tested",
                    "format": "int32",
                    "type": "integer"
                  },
                  "end_job_queue": {
                    "description": "Reached end of queue",
                    "format": "int32",
                    "type": "integer"
                  },
                  "licenses": {
                    "description": "Blocked on licenses",
                    "format": "int32",
                    "type": "integer"
                  },
                  "max_job_start": {
                    "description": "Reached number of jobs allowed to start",
                    "format": "int32",
                    "type": "integer"
                  },
                  "max_rpc_cnt": {
                    "description": "Reached RPC limit",
                    "format": "int32",
                    "type": "integer"
                  },
                  "max_sched_time": {
                    "description": "Reached maximum allowed scheduler time",
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [],
                "type": "object"
              },
              "schedule_queue_length": {
                "description": "Number of jobs pending in queue",
                "format": "int32",
                "type": "integer"
              },
              "server_thread_count": {
                "description": "Number of current active slurmctld threads",
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "statistics"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_instances_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "instances": {
            "description": "instances",
            "items": {
              "properties": {
                "cluster": {
                  "description": "Cluster name",
                  "type": "string"
                },
                "extra": {
                  "description": "Arbitrary string used for node filtering if extra constraints are enabled",
                  "type": "string"
                },
                "instance_id": {
                  "description": "Cloud instance ID",
                  "type": "string"
                },
                "instance_type": {
                  "description": "Cloud instance type",
                  "type": "string"
                },
                "node_name": {
                  "description": "NodeName",
                  "type": "string"
                },
                "time": {
                  "properties": {
                    "time_end": {
                      "description": "When the instance will end (UNIX timestamp)",
                      "format": "int64",
                      "type": "integer"
                    },
                    "time_start": {
                      "description": "When the instance will start (UNIX timestamp)",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "instances"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_job_alloc_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "job_id": {
            "description": "Submitted Job ID",
            "format": "int32",
            "type": "integer"
          },
          "job_submit_user_msg": {
            "description": "Job submission user message",
            "type": "string"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [],
        "type": "object"
      },
      "v0.0.41_openapi_job_info_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "jobs": {
            "description": "List of jobs",
            "items": {
              "properties": {
                "account": {
                  "description": "Account associated with the job",
                  "type": "string"
                },
                "accrue_time": {
                  "description": "When the job started accruing age priority (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "admin_comment": {
                  "description": "Arbitrary comment made by administrator",
                  "type": "string"
                },
                "allocating_node": {
                  "description": "Local node making the resource allocation",
                  "type": "string"
                },
                "array_job_id": {
                  "description": "Job ID of job array, or 0 if N/A",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "array_max_tasks": {
                  "description": "Maximum number of simultaneously running array tasks, 0 if no limit",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "array_task_id": {
                  "description": "Task ID of this task in job array",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "array_task_string": {
                  "description": "String expression of task IDs in this record",
                  "type": "string"
                },
                "association_id": {
                  "description": "Unique identifier for the association",
                  "format": "int32",
                  "type": "integer"
                },
                "batch_features": {
                  "description": "Features required for batch script's node",
                  "type": "string"
                },
                "batch_flag": {
                  "description": "True if batch job",
                  "type": "boolean"
                },
                "batch_host": {
                  "description": "Name of host running batch script",
                  "type": "string"
                },
                "billable_tres": {
                  "description": "Billable TRES",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "double",
                      "type": "number"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "burst_buffer": {
                  "description": "Burst buffer specifications",
                  "type": "string"
                },
                "burst_buffer_state": {
                  "description": "Burst buffer state details",
                  "type": "string"
                },
                "cluster": {
                  "description": "Cluster name",
                  "type": "string"
                },
                "cluster_features": {
                  "description": "List of required cluster features",
                  "type": "string"
                },
                "command": {
                  "description": "Executed command",
                  "type": "string"
                },
                "comment": {
                  "description": "Arbitrary comment",
                  "type": "string"
                },
                "container": {
                  "description": "Absolute path to OCI container bundle",
                  "type": "string"
                },
                "container_id": {
                  "description": "OCI container ID",
                  "type": "string"
                },
                "contiguous": {
                  "description": "True if job requires contiguous nodes",
                  "type": "boolean"
                },
                "core_spec": {
                  "description": "Specialized core count",
                  "format": "int32",
                  "type": "integer"
                },
                "cores_per_socket": {
                  "description": "Cores per socket required",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "cpu_frequency_governor": {
                  "description": "CPU frequency governor",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "cpu_frequency_maximum": {
                  "description": "Maximum CPU frequency",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "cpu_frequency_minimum": {
                  "description": "Minimum CPU frequency",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "cpus": {
                  "description": "Minimum number of CPUs required",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "cpus_per_task": {
                  "description": "Number of CPUs required by each task",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "cpus_per_tres": {
                  "description": "Semicolon delimited list of TRES=# values indicating how many CPUs should be allocated for each specified TRES (currently only used for gres/gpu)",
                  "type": "string"
                },
                "cron": {
                  "description": "Time specification for scrontab job",
                  "type": "string"
                },
                "current_working_directory": {
                  "description": "Working directory to use for the job",
                  "type": "string"
                },
                "deadline": {
                  "description": "Latest time that the job may start (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "delay_boot": {
                  "description": "Number of seconds after job eligible start that nodes will be rebooted to satisfy feature specification",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "dependency": {
                  "description": "Other jobs that must meet certain criteria before this job can start",
                  "type": "string"
                },
                "derived_exit_code": {
                  "description": "Highest exit code of all job steps",
                  "properties": {
                    "return_code": {
                      "description": "Process return code (numeric)",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "signal": {
                      "properties": {
                        "id": {
                          "description": "Signal sent to process (numeric)",
                          "properties": {
                            "infinite": {
                              "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                              "type": "boolean"
                            },
                            "number": {
                              "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                              "format": "int32",
                              "type": "integer"
                            },
                            "set": {
                              "description": "True if number has been set; False if number is unset",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "name": {
                          "description": "Signal sent to process",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "Status given by return code",
                      "items": {
                        "enum": [
                          "INVALID",
                          "PENDING",
                          "SUCCESS",
                          "ERROR",
                          "SIGNALED",
                          "CORE_DUMPED"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "eligible_time": {
                  "description": "Time when the job became eligible to run (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "end_time": {
                  "description": "End time, real or expected (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "excluded_nodes": {
                  "description": "Comma separated list of nodes that may not be used",
                  "type": "string"
                },
                "exclusive": {
                  "deprecated": true,
                  "items": {
                    "enum": [
                      "true",
                      "false",
                      "user",
                      "mcs",
                      "topo"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "exit_code": {
                  "description": "Exit code of the job",
                  "properties": {
                    "return_code": {
                      "description": "Process return code (numeric)",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "signal": {
                      "properties": {
                        "id": {
                          "description": "Signal sent to process (numeric)",
                          "properties": {
                            "infinite": {
                              "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                              "type": "boolean"
                            },
                            "number": {
                              "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                              "format": "int32",
                              "type": "integer"
                            },
                            "set": {
                              "description": "True if number has been set; False if number is unset",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "name": {
                          "description": "Signal sent to process",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "Status given by return code",
                      "items": {
                        "enum": [
                          "INVALID",
                          "PENDING",
                          "SUCCESS",
                          "ERROR",
                          "SIGNALED",
                          "CORE_DUMPED"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "extra": {
                  "description": "Arbitrary string used for node filtering if extra constraints are enabled",
                  "type": "string"
                },
                "failed_node": {
                  "description": "Name of node that caused job failure",
                  "type": "string"
                },
                "features": {
                  "description": "Comma separated list of features that are required",
                  "type": "string"
                },
                "federation_origin": {
                  "description": "Origin cluster's name (when using federation)",
                  "type": "string"
                },
                "federation_siblings_active": {
                  "description": "Active sibling job names",
                  "type": "string"
                },
                "federation_siblings_viable": {
                  "description": "Viable sibling job names",
                  "type": "string"
                },
                "flags": {
                  "description": "Job flags",
                  "items": {
                    "enum": [
                      "KILL_INVALID_DEPENDENCY",
                      "NO_KILL_INVALID_DEPENDENCY",
                      "HAS_STATE_DIRECTORY",
                      "TESTING_BACKFILL",
                      "GRES_BINDING_ENFORCED",
                      "TEST_NOW_ONLY",
                      "SEND_JOB_ENVIRONMENT",
                      "SPREAD_JOB",
                      "PREFER_MINIMUM_NODE_COUNT",
                      "JOB_KILL_HURRY",
                      "SKIP_TRES_STRING_ACCOUNTING",
                      "SIBLING_CLUSTER_UPDATE_ONLY",
                      "HETEROGENEOUS_JOB",
                      "EXACT_TASK_COUNT_REQUESTED",
                      "EXACT_CPU_COUNT_REQUESTED",
                      "TESTING_WHOLE_NODE_BACKFILL",
                      "TOP_PRIORITY_JOB",
                      "ACCRUE_COUNT_CLEARED",
                      "GRES_BINDING_DISABLED",
                      "JOB_WAS_RUNNING",
                      "JOB_ACCRUE_TIME_RESET",
                      "CRON_JOB",
                      "EXACT_MEMORY_REQUESTED",
                      "USING_DEFAULT_ACCOUNT",
                      "USING_DEFAULT_PARTITION",
                      "USING_DEFAULT_QOS",
                      "USING_DEFAULT_WCKEY",
                      "DEPENDENT",
                      "MAGNETIC",
                      "PARTITION_ASSIGNED",
                      "BACKFILL_ATTEMPTED",
                      "SCHEDULING_ATTEMPTED",
                      "STEPMGR_ENABLED"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "gres_detail": {
                  "description": "List of GRES index and counts allocated per node",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "group_id": {
                  "description": "Group ID of the user that owns the job",
                  "format": "int32",
                  "type": "integer"
                },
                "group_name": {
                  "description": "Group name of the user that owns the job",
                  "type": "string"
                },
                "het_job_id": {
                  "description": "Heterogeneous job ID, if applicable",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "het_job_id_set": {
                  "description": "Job ID range for all heterogeneous job components",
                  "type": "string"
                },
                "het_job_offset": {
                  "description": "Unique sequence number applied to this component of the heterogeneous job",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "hold": {
                  "description": "Hold (true) or release (false) job",
                  "type": "boolean"
                },
                "job_id": {
                  "description": "Job ID",
                  "format": "int32",
                  "type": "integer"
                },
                "job_resources": {
                  "description": "Resources used by the job",
                  "properties": {
                    "cpus": {
                      "description": "Number of allocated CPUs",
                      "format": "int32",
                      "type": "integer"
                    },
                    "nodes": {
                      "properties": {
                        "allocation": {
                          "description": "Allocated node resources",
                          "items": {
                            "description": "Job resources for a node",
                            "properties": {
                              "cpus": {
                                "properties": {
                                  "count": {
                                    "description": "Total number of CPUs assigned to job",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "used": {
                                    "description": "Total number of CPUs used by job",
                                    "format": "int32",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "index": {
                                "description": "Node index",
                                "format": "int32",
                                "type": "integer"
                              },
                              "memory": {
                                "properties": {
                                  "allocated": {
                                    "description": "Total memory (MiB) allocated to job",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "used": {
                                    "description": "Total memory (MiB) used by job",
                                    "format": "int64",
                                    "type": "integer"
                                  }
                                },
                                "type": "object"
                              },
                              "name": {
                                "description": "Node name",
                                "type": "string"
                              },
                              "sockets": {
                                "description": "Socket allocations in node",
                                "items": {
                                  "properties": {
                                    "cores": {
                                      "description": "Core in socket",
                                      "items": {
                                        "properties": {
                                          "index": {
                                            "description": "Core index",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "status": {
                                            "description": "Core status",
                                            "items": {
                                              "enum": [
                                                "INVALID",
                                                "UNALLOCATED",
                                                "ALLOCATED",
                                                "IN_USE"
                                              ],
                                              "type": "string"
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "required": [
                                          "index",
                                          "status"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "index": {
                                      "description": "Core index",
                                      "format": "int32",
                                      "type": "integer"
                                    }
                                  },
                                  "required": [
                                    "index",
                                    "cores"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "required": [
                              "index",
                              "name",
                              "cpus/count",
                              "cpus/used",
                              "memory/used",
                              "memory/allocated",
                              "sockets"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "count": {
                          "description": "Number of allocated nodes",
                          "format": "int32",
                          "type": "integer"
                        },
                        "list": {
                          "description": "Node(s) allocated to the job",
                          "type": "string"
                        },
                        "select_type": {
                          "description": "Node scheduling selection method",
                          "items": {
                            "enum": [
                              "AVAILABLE",
                              "ONE_ROW",
                              "RESERVED"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "whole": {
                          "description": "Whether whole nodes were allocated",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    },
                    "select_type": {
                      "description": "Scheduler consumable resource selection type",
                      "items": {
                        "enum": [
                          "CPU",
                          "SOCKET",
                          "CORE",
                          "BOARD",
                          "MEMORY",
                          "ONE_TASK_PER_CORE",
                          "PACK_NODES",
                          "CORE_DEFAULT_DIST_BLOCK",
                          "LLN",
                          "LINEAR"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "threads_per_core": {
                      "description": "Number of processor threads per CPU core",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    }
                  },
                  "required": [
                    "select_type",
                    "nodes/count",
                    "nodes/select_type",
                    "nodes/list",
                    "cpus",
                    "threads_per_core",
                    "nodes/whole",
                    "nodes/allocation"
                  ],
                  "type": "object"
                },
                "job_size_str": {
                  "description": "Number of nodes (in a range) required for this job",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "job_state": {
                  "description": "Current state",
                  "items": {
                    "enum": [
                      "PENDING",
                      "RUNNING",
                      "SUSPENDED",
                      "COMPLETED",
                      "CANCELLED",
                      "FAILED",
                      "TIMEOUT",
                      "NODE_FAIL",
                      "PREEMPTED",
                      "BOOT_FAIL",
                      "DEADLINE",
                      "OUT_OF_MEMORY",
                      "LAUNCH_FAILED",
                      "REQUEUED",
                      "REQUEUE_HOLD",
                      "SPECIAL_EXIT",
                      "RESIZING",
                      "CONFIGURING",
                      "COMPLETING",
                      "STOPPED",
                      "RECONFIG_FAIL",
                      "POWER_UP_NODE",
                      "REVOKED",
                      "REQUEUE_FED",
                      "RESV_DEL_HOLD",
                      "SIGNALING",
                      "STAGE_OUT"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "last_sched_evaluation": {
                  "description": "Last time job was evaluated for scheduling (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "licenses": {
                  "description": "License(s) required by the job",
                  "type": "string"
                },
                "mail_type": {
                  "description": "Mail event type(s)",
                  "items": {
                    "enum": [
                      "BEGIN",
                      "END",
                      "FAIL",
                      "REQUEUE",
                      "TIME=100%",
                      "TIME=90%",
                      "TIME=80%",
                      "TIME=50%",
                      "STAGE_OUT",
                      "ARRAY_TASKS",
                      "INVALID_DEPENDENCY"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "mail_user": {
                  "description": "User to receive email notifications",
                  "type": "string"
                },
                "max_cpus": {
                  "description": "Maximum number of CPUs usable by the job",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "max_nodes": {
                  "description": "Maximum number of nodes usable by the job",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "maximum_switch_wait_time": {
                  "description": "Maximum time to wait for switches in seconds",
                  "format": "int32",
                  "type": "integer"
                },
                "mcs_label": {
                  "description": "Multi-Category Security label on the job",
                  "type": "string"
                },
                "memory_per_cpu": {
                  "description": "Minimum memory in megabytes per allocated CPU",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "memory_per_node": {
                  "description": "Minimum memory in megabytes per allocated node",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "memory_per_tres": {
                  "description": "Semicolon delimited list of TRES=# values indicating how much memory in megabytes should be allocated for each specified TRES (currently only used for gres/gpu)",
                  "type": "string"
                },
                "minimum_cpus_per_node": {
                  "description": "Minimum number of CPUs per node",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "minimum_switches": {
                  "description": "Maximum number of switches (the 'minimum' in the key is incorrect)",
                  "format": "int32",
                  "type": "integer"
                },
                "minimum_tmp_disk_per_node": {
                  "description": "Minimum tmp disk space required per node",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "name": {
                  "description": "Job name",
                  "type": "string"
                },
                "network": {
                  "description": "Network specs for the job",
                  "type": "string"
                },
                "nice": {
                  "description": "Requested job priority change",
                  "format": "int32",
                  "type": "integer"
                },
                "node_count": {
                  "description": "Minimum number of nodes required",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "nodes": {
                  "description": "Node(s) allocated to the job",
                  "type": "string"
                },
                "oversubscribe": {
                  "deprecated": true,
                  "type": "boolean"
                },
                "partition": {
                  "description": "Partition assigned to the job",
                  "type": "string"
                },
                "power": {
                  "properties": {
                    "flags": {
                      "deprecated": true,
                      "items": {},
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "pre_sus_time": {
                  "description": "Total run time prior to last suspend in seconds",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "preempt_time": {
                  "description": "Time job received preemption signal (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "preemptable_time": {
                  "description": "Time job becomes eligible for preemption (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "prefer": {
                  "description": "Feature(s) the job requested but that are not required",
                  "type": "string"
                },
                "priority": {
                  "description": "Request specific job priority",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "profile": {
                  "description": "Profile used by the acct_gather_profile plugin",
                  "items": {
                    "enum": [
                      "NOT_SET",
                      "NONE",
                      "ENERGY",
                      "LUSTRE",
                      "NETWORK",
                      "TASK"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "qos": {
                  "description": "Quality of Service assigned to the job, if pending the QOS requested",
                  "type": "string"
                },
                "reboot": {
                  "description": "Node reboot requested before start",
                  "type": "boolean"
                },
                "requeue": {
                  "description": "Determines whether the job may be requeued",
                  "type": "boolean"
                },
                "required_nodes": {
                  "description": "Comma separated list of required nodes",
                  "type": "string"
                },
                "resize_time": {
                  "description": "Time of last size change (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "restart_cnt": {
                  "description": "Number of job restarts",
                  "format": "int32",
                  "type": "integer"
                },
                "resv_name": {
                  "description": "Name of reservation to use",
                  "type": "string"
                },
                "scheduled_nodes": {
                  "description": "List of nodes scheduled to be used for the job",
                  "type": "string"
                },
                "selinux_context": {
                  "description": "SELinux context",
                  "type": "string"
                },
                "shared": {
                  "description": "How the job can share resources with other jobs, if at all",
                  "items": {
                    "enum": [
                      "none",
                      "oversubscribe",
                      "user",
                      "mcs",
                      "topo"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "show_flags": {
                  "deprecated": true,
                  "items": {
                    "enum": [
                      "ALL",
                      "DETAIL",
                      "MIXED",
                      "LOCAL",
                      "SIBLING",
                      "FEDERATION",
                      "FUTURE"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "sockets_per_board": {
                  "description": "Number of sockets per board required",
                  "format": "int32",
                  "type": "integer"
                },
                "sockets_per_node": {
                  "description": "Number of sockets per node required",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "standard_error": {
                  "description": "Path to stderr file",
                  "type": "string"
                },
                "standard_input": {
                  "description": "Path to stdin file",
                  "type": "string"
                },
                "standard_output": {
                  "description": "Path to stdout file",
                  "type": "string"
                },
                "start_time": {
                  "description": "Time execution began, or is expected to begin (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "state_description": {
                  "description": "Optional details for state_reason",
                  "type": "string"
                },
                "state_reason": {
                  "description": "Reason for current Pending or Failed state",
                  "type": "string"
                },
                "submit_time": {
                  "description": "Time when the job was submitted (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "suspend_time": {
                  "description": "Time the job was last suspended or resumed (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "system_comment": {
                  "description": "Arbitrary comment from slurmctld",
                  "type": "string"
                },
                "tasks": {
                  "description": "Number of tasks",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "tasks_per_board": {
                  "description": "Number of tasks invoked on each board",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "tasks_per_core": {
                  "description": "Number of tasks invoked on each core",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "tasks_per_node": {
                  "description": "Number of tasks invoked on each node",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "tasks_per_socket": {
                  "description": "Number of tasks invoked on each socket",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "tasks_per_tres": {
                  "description": "Number of tasks that can assess each GPU",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "thread_spec": {
                  "description": "Specialized thread count",
                  "format": "int32",
                  "type": "integer"
                },
                "threads_per_core": {
                  "description": "Number of processor threads per CPU core required",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "time_limit": {
                  "description": "Maximum run time in minutes",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "time_minimum": {
                  "description": "Minimum run time in minutes",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "tres_alloc_str": {
                  "description": "TRES used by the job",
                  "type": "string"
                },
                "tres_bind": {
                  "description": "Task to TRES binding directives",
                  "type": "string"
                },
                "tres_freq": {
                  "description": "TRES frequency directives",
                  "type": "string"
                },
                "tres_per_job": {
                  "description": "Comma separated list of TRES=# values to be allocated per job",
                  "type": "string"
                },
                "tres_per_node": {
                  "description": "Comma separated list of TRES=# values to be allocated per node",
                  "type": "string"
                },
                "tres_per_socket": {
                  "description": "Comma separated list of TRES=# values to be allocated per socket",
                  "type": "string"
                },
                "tres_per_task": {
                  "description": "Comma separated list of TRES=# values to be allocated per task",
                  "type": "string"
                },
                "tres_req_str": {
                  "description": "TRES requested by the job",
                  "type": "string"
                },
                "user_id": {
                  "description": "User ID that owns the job",
                  "format": "int32",
                  "type": "integer"
                },
                "user_name": {
                  "description": "User name that owns the job",
                  "type": "string"
                },
                "wckey": {
                  "description": "Workload characterization key",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "last_backfill": {
            "description": "Time of last backfill scheduler run (UNIX timestamp)",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int64",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "last_update": {
            "description": "Time of last job change (UNIX timestamp)",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int64",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "jobs",
          "last_backfill",
          "last_update"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_job_post_response": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "job_id": {
            "deprecated": true,
            "description": "First updated Job ID - Use results instead",
            "type": "string"
          },
          "job_submit_user_msg": {
            "deprecated": true,
            "description": "First updated Job submission user message - Use results instead",
            "type": "string"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "results": {
            "description": "Job update results",
            "items": {
              "properties": {
                "error": {
                  "description": "Verbose update status or error",
                  "type": "string"
                },
                "error_code": {
                  "description": "Verbose update status or error",
                  "format": "int32",
                  "type": "integer"
                },
                "job_id": {
                  "description": "Job ID for updated job",
                  "format": "int32",
                  "type": "integer"
                },
                "step_id": {
                  "description": "Step ID for updated job",
                  "type": "string"
                },
                "why": {
                  "description": "Update response message",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "step_id": {
            "deprecated": true,
            "description": "First updated Step ID - Use results instead",
            "type": "string"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [],
        "type": "object"
      },
      "v0.0.41_openapi_job_submit_response": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "job_id": {
            "description": "Submitted Job ID",
            "format": "int32",
            "type": "integer"
          },
          "job_submit_user_msg": {
            "description": "Job submission user message",
            "type": "string"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "result": {
            "deprecated": true,
            "description": "Job submission",
            "properties": {
              "error": {
                "description": "Error message",
                "type": "string"
              },
              "error_code": {
                "description": "Error code",
                "format": "int32",
                "type": "integer"
              },
              "job_id": {
                "description": "New job ID",
                "format": "int32",
                "type": "integer"
              },
              "job_submit_user_msg": {
                "description": "Message to user from job_submit plugin",
                "type": "string"
              },
              "step_id": {
                "description": "New job step ID",
                "type": "string"
              }
            },
            "required": [],
            "type": "object"
          },
          "step_id": {
            "description": "Submitted Step ID",
            "type": "string"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [],
        "type": "object"
      },
      "v0.0.41_openapi_kill_jobs_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "status": {
            "description": "resultant status of signal request",
            "items": {
              "description": "List of jobs signal responses",
              "properties": {
                "error": {
                  "properties": {
                    "code": {
                      "description": "Numeric error encountered signaling job",
                      "format": "int32",
                      "type": "integer"
                    },
                    "message": {
                      "description": "Error message why signaling job failed",
                      "type": "string"
                    },
                    "string": {
                      "description": "String error encountered signaling job",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "federation": {
                  "properties": {
                    "sibling": {
                      "description": "Name of federation sibling (may be empty for non-federation)",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "job_id": {
                  "description": "Job ID that signaling failed",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "step_id": {
                  "description": "Job or Step ID that signaling failed",
                  "type": "string"
                }
              },
              "required": [
                "error/string",
                "error/code",
                "error/message",
                "step_id",
                "job_id",
                "federation/sibling"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_licenses_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "last_update": {
            "description": "Time of last licenses change (UNIX timestamp)",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int64",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "licenses": {
            "description": "List of licenses",
            "items": {
              "properties": {
                "Free": {
                  "description": "Number of licenses currently available",
                  "format": "int32",
                  "type": "integer"
                },
                "LastConsumed": {
                  "description": "Last known number of licenses that were consumed in the license manager (Remote Only)",
                  "format": "int32",
                  "type": "integer"
                },
                "LastDeficit": {
                  "description": "Number of \"missing licenses\" from the cluster's perspective",
                  "format": "int32",
                  "type": "integer"
                },
                "LastUpdate": {
                  "description": "When the license information was last updated (UNIX Timestamp)",
                  "format": "int64",
                  "type": "integer"
                },
                "LicenseName": {
                  "description": "Name of the license",
                  "type": "string"
                },
                "Remote": {
                  "description": "Indicates whether licenses are served by the database",
                  "type": "boolean"
                },
                "Reserved": {
                  "description": "Number of licenses reserved",
                  "format": "int32",
                  "type": "integer"
                },
                "Total": {
                  "description": "Total number of licenses present",
                  "format": "int32",
                  "type": "integer"
                },
                "Used": {
                  "description": "Number of licenses in use",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "licenses",
          "last_update"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_nodes_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "last_update": {
            "description": "Time of last node change (UNIX timestamp)",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int64",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "nodes": {
            "description": "List of nodes",
            "items": {
              "properties": {
                "active_features": {
                  "description": "Currently active features",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "address": {
                  "description": "NodeAddr, used to establish a communication path",
                  "type": "string"
                },
                "alloc_cpus": {
                  "description": "Total number of CPUs currently allocated for jobs",
                  "format": "int32",
                  "type": "integer"
                },
                "alloc_idle_cpus": {
                  "description": "Total number of idle CPUs",
                  "format": "int32",
                  "type": "integer"
                },
                "alloc_memory": {
                  "description": "Total memory in MB currently allocated for jobs",
                  "format": "int64",
                  "type": "integer"
                },
                "architecture": {
                  "description": "Computer architecture",
                  "type": "string"
                },
                "boards": {
                  "description": "Number of Baseboards in nodes with a baseboard controller",
                  "format": "int32",
                  "type": "integer"
                },
                "boot_time": {
                  "description": "Time when the node booted (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "burstbuffer_network_address": {
                  "description": "Alternate network path to be used for sbcast network traffic",
                  "type": "string"
                },
                "cluster_name": {
                  "description": "Cluster name (only set in federated environments)",
                  "type": "string"
                },
                "comment": {
                  "description": "Arbitrary comment",
                  "type": "string"
                },
                "cores": {
                  "description": "Number of cores in a single physical processor socket",
                  "format": "int32",
                  "type": "integer"
                },
                "cpu_binding": {
                  "description": "Default method for binding tasks to allocated CPUs",
                  "format": "int32",
                  "type": "integer"
                },
                "cpu_load": {
                  "description": "CPU load as reported by the OS",
                  "format": "int32",
                  "type": "integer"
                },
                "cpus": {
                  "description": "Total CPUs, including cores and threads",
                  "format": "int32",
                  "type": "integer"
                },
                "effective_cpus": {
                  "description": "Number of effective CPUs (excluding specialized CPUs)",
                  "format": "int32",
                  "type": "integer"
                },
                "energy": {
                  "description": "Energy usage data",
                  "properties": {
                    "average_watts": {
                      "description": "Average power consumption, in watts",
                      "format": "int32",
                      "type": "integer"
                    },
                    "base_consumed_energy": {
                      "description": "The energy consumed between when the node was powered on and the last time it was registered by slurmd, in joules",
                      "format": "int64",
                      "type": "integer"
                    },
                    "consumed_energy": {
                      "description": "The energy consumed between the last time the node was registered by the slurmd daemon and the last node energy accounting sample, in joules",
                      "format": "int64",
                      "type": "integer"
                    },
                    "current_watts": {
                      "description": "The instantaneous power consumption at the time of the last node energy accounting sample, in watts",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "last_collected": {
                      "description": "Time when energy data was last retrieved (UNIX timestamp)",
                      "format": "int64",
                      "type": "integer"
                    },
                    "previous_consumed_energy": {
                      "description": "Previous value of consumed_energy",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "external_sensors": {
                  "deprecated": true,
                  "properties": {},
                  "type": "object"
                },
                "extra": {
                  "description": "Arbitrary string used for node filtering if extra constraints are enabled",
                  "type": "string"
                },
                "features": {
                  "description": "Available features",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "free_mem": {
                  "description": "Total memory in MB currently free as reported by the OS",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "gpu_spec": {
                  "description": "CPU cores reserved for jobs that also use a GPU",
                  "type": "string"
                },
                "gres": {
                  "description": "Generic resources",
                  "type": "string"
                },
                "gres_drained": {
                  "description": "Drained generic resources",
                  "type": "string"
                },
                "gres_used": {
                  "description": "Generic resources currently in use",
                  "type": "string"
                },
                "hostname": {
                  "description": "NodeHostname",
                  "type": "string"
                },
                "instance_id": {
                  "description": "Cloud instance ID",
                  "type": "string"
                },
                "instance_type": {
                  "description": "Cloud instance type",
                  "type": "string"
                },
                "last_busy": {
                  "description": "Time when the node was last busy (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "mcs_label": {
                  "description": "Multi-Category Security label",
                  "type": "string"
                },
                "name": {
                  "description": "NodeName",
                  "type": "string"
                },
                "next_state_after_reboot": {
                  "description": "The state the node will be assigned after rebooting",
                  "items": {
                    "enum": [
                      "INVALID",
                      "UNKNOWN",
                      "DOWN",
                      "IDLE",
                      "ALLOCATED",
                      "ERROR",
                      "MIXED",
                      "FUTURE",
                      "RESERVED",
                      "UNDRAIN",
                      "CLOUD",
                      "RESUME",
                      "DRAIN",
                      "COMPLETING",
                      "NOT_RESPONDING",
                      "POWERED_DOWN",
                      "FAIL",
                      "POWERING_UP",
                      "MAINTENANCE",
                      "REBOOT_REQUESTED",
                      "REBOOT_CANCELED",
                      "POWERING_DOWN",
                      "DYNAMIC_FUTURE",
                      "REBOOT_ISSUED",
                      "PLANNED",
                      "INVALID_REG",
                      "POWER_DOWN",
                      "POWER_UP",
                      "POWER_DRAIN",
                      "DYNAMIC_NORM"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "operating_system": {
                  "description": "Operating system reported by the node",
                  "type": "string"
                },
                "owner": {
                  "description": "User allowed to run jobs on this node (unset if no restriction)",
                  "type": "string"
                },
                "partitions": {
                  "description": "Partitions containing this node",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "port": {
                  "description": "TCP port number of the slurmd",
                  "format": "int32",
                  "type": "integer"
                },
                "power": {
                  "deprecated": true,
                  "properties": {},
                  "type": "object"
                },
                "real_memory": {
                  "description": "Total memory in MB on the node",
                  "format": "int64",
                  "type": "integer"
                },
                "reason": {
                  "description": "Describes why the node is in a \"DOWN\", \"DRAINED\", \"DRAINING\", \"FAILING\" or \"FAIL\" state",
                  "type": "string"
                },
                "reason_changed_at": {
                  "description": "When the reason changed (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "reason_set_by_user": {
                  "description": "User who set the reason",
                  "type": "string"
                },
                "res_cores_per_gpu": {
                  "description": "Number of CPU cores per GPU restricted to GPU jobs",
                  "format": "int32",
                  "type": "integer"
                },
                "reservation": {
                  "description": "Name of reservation containing this node",
                  "type": "string"
                },
                "resume_after": {
                  "description": "Number of seconds after the node's state is updated to \"DOWN\" or \"DRAIN\" before scheduling a node state resume",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "slurmd_start_time": {
                  "description": "Time when the slurmd started (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "sockets": {
                  "description": "Number of physical processor sockets/chips on the node",
                  "format": "int32",
                  "type": "integer"
                },
                "specialized_cores": {
                  "description": "Number of cores reserved for system use",
                  "format": "int32",
                  "type": "integer"
                },
                "specialized_cpus": {
                  "description": "Abstract CPU IDs on this node reserved for exclusive use by slurmd and slurmstepd",
                  "type": "string"
                },
                "specialized_memory": {
                  "description": "Combined memory limit, in MB, for Slurm compute node daemons",
                  "format": "int64",
                  "type": "integer"
                },
                "state": {
                  "description": "Node state(s) applicable to this node",
                  "items": {
                    "enum": [
                      "INVALID",
                      "UNKNOWN",
                      "DOWN",
                      "IDLE",
                      "ALLOCATED",
                      "ERROR",
                      "MIXED",
                      "FUTURE",
                      "RESERVED",
                      "UNDRAIN",
                      "CLOUD",
                      "RESUME",
                      "DRAIN",
                      "COMPLETING",
                      "NOT_RESPONDING",
                      "POWERED_DOWN",
                      "FAIL",
                      "POWERING_UP",
                      "MAINTENANCE",
                      "REBOOT_REQUESTED",
                      "REBOOT_CANCELED",
                      "POWERING_DOWN",
                      "DYNAMIC_FUTURE",
                      "REBOOT_ISSUED",
                      "PLANNED",
                      "INVALID_REG",
                      "POWER_DOWN",
                      "POWER_UP",
                      "POWER_DRAIN",
                      "DYNAMIC_NORM"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "temporary_disk": {
                  "description": "Total size in MB of temporary disk storage in TmpFS",
                  "format": "int32",
                  "type": "integer"
                },
                "threads": {
                  "description": "Number of logical threads in a single physical core",
                  "format": "int32",
                  "type": "integer"
                },
                "tres": {
                  "description": "Configured trackable resources",
                  "type": "string"
                },
                "tres_used": {
                  "description": "Trackable resources currently allocated for jobs",
                  "type": "string"
                },
                "tres_weighted": {
                  "description": "Weighted number of billable trackable resources allocated",
                  "format": "double",
                  "type": "number"
                },
                "version": {
                  "description": "Slurmd version",
                  "type": "string"
                },
                "weight": {
                  "description": "Weight of the node for scheduling purposes",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "nodes",
          "last_update"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_partition_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "last_update": {
            "description": "Time of last partition change (UNIX timestamp)",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int64",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "partitions": {
            "description": "List of partitions",
            "items": {
              "properties": {
                "accounts": {
                  "properties": {
                    "allowed": {
                      "description": "AllowAccounts",
                      "type": "string"
                    },
                    "deny": {
                      "description": "DenyAccounts",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "alternate": {
                  "description": "Alternate",
                  "type": "string"
                },
                "cluster": {
                  "description": "Cluster name",
                  "type": "string"
                },
                "cpus": {
                  "properties": {
                    "task_binding": {
                      "description": "CpuBind",
                      "format": "int32",
                      "type": "integer"
                    },
                    "total": {
                      "description": "TotalCPUs",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "defaults": {
                  "properties": {
                    "job": {
                      "description": "JobDefaults",
                      "type": "string"
                    },
                    "memory_per_cpu": {
                      "description": "DefMemPerCPU or DefMemPerNode",
                      "format": "int64",
                      "type": "integer"
                    },
                    "partition_memory_per_cpu": {
                      "description": "DefMemPerCPU",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int64",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "partition_memory_per_node": {
                      "description": "DefMemPerNode",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int64",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "time": {
                      "description": "DefaultTime in minutes",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "grace_time": {
                  "description": "GraceTime",
                  "format": "int32",
                  "type": "integer"
                },
                "groups": {
                  "properties": {
                    "allowed": {
                      "description": "AllowGroups",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "maximums": {
                  "properties": {
                    "cpus_per_node": {
                      "description": "MaxCPUsPerNode",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "cpus_per_socket": {
                      "description": "MaxCPUsPerSocket",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "memory_per_cpu": {
                      "description": "MaxMemPerCPU or MaxMemPerNode",
                      "format": "int64",
                      "type": "integer"
                    },
                    "nodes": {
                      "description": "MaxNodes",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "over_time_limit": {
                      "description": "OverTimeLimit",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "oversubscribe": {
                      "properties": {
                        "flags": {
                          "description": "Flags applicable to the OverSubscribe setting",
                          "items": {
                            "enum": [
                              "force"
                            ],
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "jobs": {
                          "description": "Maximum number of jobs allowed to oversubscribe resources",
                          "format": "int32",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "partition_memory_per_cpu": {
                      "description": "MaxMemPerCPU",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int64",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "partition_memory_per_node": {
                      "description": "MaxMemPerNode",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int64",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "shares": {
                      "description": "OverSubscribe",
                      "format": "int32",
                      "type": "integer"
                    },
                    "time": {
                      "description": "MaxTime",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "minimums": {
                  "properties": {
                    "nodes": {
                      "description": "MinNodes",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "name": {
                  "description": "PartitionName",
                  "type": "string"
                },
                "node_sets": {
                  "description": "NodeSets",
                  "type": "string"
                },
                "nodes": {
                  "properties": {
                    "allowed_allocation": {
                      "description": "AllocNodes",
                      "type": "string"
                    },
                    "configured": {
                      "description": "Nodes",
                      "type": "string"
                    },
                    "total": {
                      "description": "TotalNodes",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "partition": {
                  "properties": {
                    "state": {
                      "description": "Current state(s)",
                      "items": {
                        "enum": [
                          "INACTIVE",
                          "UNKNOWN",
                          "UP",
                          "DOWN",
                          "DRAIN"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "priority": {
                  "properties": {
                    "job_factor": {
                      "description": "PriorityJobFactor",
                      "format": "int32",
                      "type": "integer"
                    },
                    "tier": {
                      "description": "PriorityTier",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "qos": {
                  "properties": {
                    "allowed": {
                      "description": "AllowQOS",
                      "type": "string"
                    },
                    "assigned": {
                      "description": "QOS",
                      "type": "string"
                    },
                    "deny": {
                      "description": "DenyQOS",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "select_type": {
                  "description": "Scheduler consumable resource selection type",
                  "items": {
                    "enum": [
                      "CPU",
                      "SOCKET",
                      "CORE",
                      "BOARD",
                      "MEMORY",
                      "ONE_TASK_PER_CORE",
                      "PACK_NODES",
                      "CORE_DEFAULT_DIST_BLOCK",
                      "LLN",
                      "LINEAR"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "suspend_time": {
                  "description": "SuspendTime (GLOBAL if both set and infinite are false)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "timeouts": {
                  "properties": {
                    "resume": {
                      "description": "ResumeTimeout (GLOBAL if both set and infinite are false)",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "suspend": {
                      "description": "SuspendTimeout (GLOBAL if both set and infinite are false)",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "tres": {
                  "properties": {
                    "billing_weights": {
                      "description": "TRESBillingWeights",
                      "type": "string"
                    },
                    "configured": {
                      "description": "TRES",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "partitions",
          "last_update"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_ping_array_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "pings": {
            "description": "pings",
            "items": {
              "properties": {
                "hostname": {
                  "description": "Target for ping",
                  "type": "string"
                },
                "latency": {
                  "description": "Number of microseconds it took to successfully ping or timeout",
                  "format": "int64",
                  "type": "integer"
                },
                "mode": {
                  "description": "The operating mode of the responding slurmctld",
                  "type": "string"
                },
                "pinged": {
                  "description": "Ping result",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "pings"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_reservation_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "last_update": {
            "description": "Time of last reservation change (UNIX timestamp)",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int64",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "reservations": {
            "description": "List of reservations",
            "items": {
              "properties": {
                "accounts": {
                  "description": "Comma separated list of permitted accounts",
                  "type": "string"
                },
                "burst_buffer": {
                  "description": "BurstBuffer",
                  "type": "string"
                },
                "core_count": {
                  "description": "CoreCnt",
                  "format": "int32",
                  "type": "integer"
                },
                "core_specializations": {
                  "description": "Reserved cores specification",
                  "items": {
                    "properties": {
                      "core": {
                        "description": "IDs of reserved cores",
                        "type": "string"
                      },
                      "node": {
                        "description": "Name of reserved node",
                        "type": "string"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "type": "array"
                },
                "end_time": {
                  "description": "EndTime (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "features": {
                  "description": "Features",
                  "type": "string"
                },
                "flags": {
                  "description": "Flags associated with the reservation",
                  "items": {
                    "enum": [
                      "MAINT",
                      "NO_MAINT",
                      "DAILY",
                      "NO_DAILY",
                      "WEEKLY",
                      "NO_WEEKLY",
                      "IGNORE_JOBS",
                      "NO_IGNORE_JOBS",
                      "ANY_NODES",
                      "STATIC",
                      "NO_STATIC",
                      "PART_NODES",
                      "NO_PART_NODES",
                      "OVERLAP",
                      "SPEC_NODES",
                      "TIME_FLOAT",
                      "REPLACE",
                      "ALL_NODES",
                      "PURGE_COMP",
                      "WEEKDAY",
                      "NO_WEEKDAY",
                      "WEEKEND",
                      "NO_WEEKEND",
                      "FLEX",
                      "NO_FLEX",
                      "DURATION_PLUS",
                      "DURATION_MINUS",
                      "NO_HOLD_JOBS_AFTER_END",
                      "NO_PURGE_COMP",
                      "MAGNETIC",
                      "SKIP",
                      "HOURLY",
                      "NO_HOURLY",
                      "USER_DELETE",
                      "NO_USER_DELETE",
                      "REOCCURRING"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "groups": {
                  "description": "Groups",
                  "type": "string"
                },
                "licenses": {
                  "description": "Licenses",
                  "type": "string"
                },
                "max_start_delay": {
                  "description": "MaxStartDelay in seconds",
                  "format": "int32",
                  "type": "integer"
                },
                "name": {
                  "description": "ReservationName",
                  "type": "string"
                },
                "node_count": {
                  "description": "NodeCnt",
                  "format": "int32",
                  "type": "integer"
                },
                "node_list": {
                  "description": "Nodes",
                  "type": "string"
                },
                "partition": {
                  "description": "PartitionName",
                  "type": "string"
                },
                "purge_completed": {
                  "properties": {
                    "time": {
                      "description": "If PURGE_COMP flag is set, the number of seconds this reservation will sit idle until it is revoked",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "start_time": {
                  "description": "StartTime (UNIX timestamp)",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int64",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "tres": {
                  "description": "Comma separated list of required TRES",
                  "type": "string"
                },
                "users": {
                  "description": "Comma separated list of permitted users",
                  "type": "string"
                },
                "watts": {
                  "deprecated": true,
                  "description": "32 bit integer number with flags",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "reservations",
          "last_update"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [],
        "type": "object"
      },
      "v0.0.41_openapi_shares_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "shares": {
            "description": "fairshare info",
            "properties": {
              "shares": {
                "description": "Association shares",
                "items": {
                  "properties": {
                    "cluster": {
                      "description": "Cluster name",
                      "type": "string"
                    },
                    "effective_usage": {
                      "description": "Effective, normalized usage",
                      "format": "double",
                      "type": "number"
                    },
                    "fairshare": {
                      "properties": {
                        "factor": {
                          "description": "Fairshare factor",
                          "format": "double",
                          "type": "number"
                        },
                        "level": {
                          "description": "Fairshare factor at this level; stored on an assoc as a long double, but that is not needed for display in sshare",
                          "format": "double",
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "id": {
                      "description": "Association ID",
                      "format": "int32",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Share name",
                      "type": "string"
                    },
                    "parent": {
                      "description": "Parent name",
                      "type": "string"
                    },
                    "partition": {
                      "description": "Partition name",
                      "type": "string"
                    },
                    "shares": {
                      "description": "Number of shares allocated",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "shares_normalized": {
                      "description": "Normalized shares",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "double",
                          "type": "number"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "tres": {
                      "properties": {
                        "group_minutes": {
                          "description": "TRES-minute limit",
                          "items": {
                            "properties": {
                              "name": {
                                "description": "TRES name",
                                "type": "string"
                              },
                              "value": {
                                "description": "TRES value",
                                "properties": {
                                  "infinite": {
                                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                    "type": "boolean"
                                  },
                                  "number": {
                                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "set": {
                                    "description": "True if number has been set; False if number is unset",
                                    "type": "boolean"
                                  }
                                },
                                "required": [],
                                "type": "object"
                              }
                            },
                            "required": [],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "run_seconds": {
                          "description": "Currently running tres-secs = grp_used_tres_run_secs",
                          "items": {
                            "properties": {
                              "name": {
                                "description": "TRES name",
                                "type": "string"
                              },
                              "value": {
                                "description": "TRES value",
                                "properties": {
                                  "infinite": {
                                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                    "type": "boolean"
                                  },
                                  "number": {
                                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "set": {
                                    "description": "True if number has been set; False if number is unset",
                                    "type": "boolean"
                                  }
                                },
                                "required": [],
                                "type": "object"
                              }
                            },
                            "required": [],
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "usage": {
                          "description": "Measure of each TRES usage",
                          "items": {
                            "properties": {
                              "name": {
                                "description": "TRES name",
                                "type": "string"
                              },
                              "value": {
                                "description": "TRES value",
                                "type": "number"
                              }
                            },
                            "required": [],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "type": {
                      "description": "User or account association",
                      "items": {
                        "enum": [
                          "USER",
                          "ASSOCIATION"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "usage": {
                      "description": "Measure of tresbillableunits usage",
                      "format": "int64",
                      "type": "integer"
                    },
                    "usage_normalized": {
                      "description": "Normalized usage",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "double",
                          "type": "number"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "type": "array"
              },
              "total_shares": {
                "description": "Total number of shares",
                "format": "int64",
                "type": "integer"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "shares"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_slurmdbd_config_resp": {
        "properties": {
          "accounts": {
            "description": "Accounts",
            "items": {
              "properties": {
                "associations": {
                  "description": "Associations involving this account (only populated if requested)",
                  "items": {
                    "properties": {
                      "account": {
                        "description": "Account",
                        "type": "string"
                      },
                      "cluster": {
                        "description": "Cluster",
                        "type": "string"
                      },
                      "id": {
                        "description": "Numeric association ID",
                        "format": "int32",
                        "type": "integer"
                      },
                      "partition": {
                        "description": "Partition",
                        "type": "string"
                      },
                      "user": {
                        "description": "User name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "user"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "coordinators": {
                  "description": "List of users that are a coordinator of this account (only populated if requested)",
                  "items": {
                    "properties": {
                      "direct": {
                        "description": "Indicates whether the coordinator was directly assigned to this account",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "User name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "description": {
                  "description": "Arbitrary string describing the account",
                  "type": "string"
                },
                "flags": {
                  "description": "Flags associated with the account",
                  "items": {
                    "enum": [
                      "DELETED",
                      "WithAssociations",
                      "WithCoordinators",
                      "NoUsersAreCoords",
                      "UsersAreCoords"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Account name",
                  "type": "string"
                },
                "organization": {
                  "description": "Organization to which the account belongs",
                  "type": "string"
                }
              },
              "required": [
                "description",
                "name",
                "organization"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "associations": {
            "description": "Associations",
            "items": {
              "properties": {
                "account": {
                  "description": "Account",
                  "type": "string"
                },
                "accounting": {
                  "description": "Accounting records containing related resource usage",
                  "items": {
                    "properties": {
                      "TRES": {
                        "description": "Trackable resources",
                        "properties": {
                          "count": {
                            "description": "TRES count (0 if listed generically)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "id": {
                            "description": "ID used in database",
                            "format": "int32",
                            "type": "integer"
                          },
                          "name": {
                            "description": "TRES name (if applicable)",
                            "type": "string"
                          },
                          "type": {
                            "description": "TRES type (CPU, MEM, etc)",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "allocated": {
                        "properties": {
                          "seconds": {
                            "description": "Number of cpu seconds allocated",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "Association ID or Workload characterization key ID",
                        "format": "int32",
                        "type": "integer"
                      },
                      "start": {
                        "description": "When the record was started",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "type": "array"
                },
                "cluster": {
                  "description": "Cluster name",
                  "type": "string"
                },
                "comment": {
                  "description": "Arbitrary comment",
                  "type": "string"
                },
                "default": {
                  "properties": {
                    "qos": {
                      "description": "Default QOS",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "flags": {
                  "description": "Flags on the association",
                  "items": {
                    "enum": [
                      "DELETED",
                      "NoUpdate",
                      "Exact",
                      "NoUsersAreCoords",
                      "UsersAreCoords"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "id": {
                  "description": "Unique ID",
                  "format": "int32",
                  "type": "integer"
                },
                "is_default": {
                  "description": "Is default association for user",
                  "type": "boolean"
                },
                "lineage": {
                  "description": "Complete path up the hierarchy to the root association",
                  "type": "string"
                },
                "max": {
                  "properties": {
                    "jobs": {
                      "properties": {
                        "accruing": {
                          "description": "MaxJobsAccrue",
                          "properties": {
                            "infinite": {
                              "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                              "type": "boolean"
                            },
                            "number": {
                              "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                              "format": "int32",
                              "type": "integer"
                            },
                            "set": {
                              "description": "True if number has been set; False if number is unset",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "active": {
                          "description": "MaxJobs",
                          "properties": {
                            "infinite": {
                              "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                              "type": "boolean"
                            },
                            "number": {
                              "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                              "format": "int32",
                              "type": "integer"
                            },
                            "set": {
                              "description": "True if number has been set; False if number is unset",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "per": {
                          "properties": {
                            "accruing": {
                              "description": "GrpJobsAccrue",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            },
                            "count": {
                              "description": "GrpJobs",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            },
                            "submitted": {
                              "description": "GrpSubmitJobs",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            },
                            "wall_clock": {
                              "description": "MaxWallDurationPerJob",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "total": {
                          "description": "MaxSubmitJobs",
                          "properties": {
                            "infinite": {
                              "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                              "type": "boolean"
                            },
                            "number": {
                              "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                              "format": "int32",
                              "type": "integer"
                            },
                            "set": {
                              "description": "True if number has been set; False if number is unset",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "per": {
                      "properties": {
                        "account": {
                          "properties": {
                            "wall_clock": {
                              "description": "GrpWall",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "tres": {
                      "properties": {
                        "group": {
                          "properties": {
                            "active": {
                              "description": "GrpTRESRunMins",
                              "items": {
                                "properties": {
                                  "count": {
                                    "description": "TRES count (0 if listed generically)",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "ID used in database",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "TRES name (if applicable)",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "TRES type (CPU, MEM, etc)",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "minutes": {
                              "description": "GrpTRESMins",
                              "items": {
                                "properties": {
                                  "count": {
                                    "description": "TRES count (0 if listed generically)",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "ID used in database",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "TRES name (if applicable)",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "TRES type (CPU, MEM, etc)",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "minutes": {
                          "properties": {
                            "per": {
                              "properties": {
                                "job": {
                                  "description": "MaxTRESMinsPerJob",
                                  "items": {
                                    "properties": {
                                      "count": {
                                        "description": "TRES count (0 if listed generically)",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "ID used in database",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "TRES name (if applicable)",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "TRES type (CPU, MEM, etc)",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "total": {
                              "description": "MaxTRESMinsPerJob",
                              "items": {
                                "properties": {
                                  "count": {
                                    "description": "TRES count (0 if listed generically)",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "ID used in database",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "TRES name (if applicable)",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "TRES type (CPU, MEM, etc)",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "per": {
                          "properties": {
                            "job": {
                              "description": "MaxTRESPerJob",
                              "items": {
                                "properties": {
                                  "count": {
                                    "description": "TRES count (0 if listed generically)",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "ID used in database",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "TRES name (if applicable)",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "TRES type (CPU, MEM, etc)",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "node": {
                              "description": "MaxTRESPerNode",
                              "items": {
                                "properties": {
                                  "count": {
                                    "description": "TRES count (0 if listed generically)",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "ID used in database",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "TRES name (if applicable)",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "TRES type (CPU, MEM, etc)",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "total": {
                          "description": "GrpTRES",
                          "items": {
                            "properties": {
                              "count": {
                                "description": "TRES count (0 if listed generically)",
                                "format": "int64",
                                "type": "integer"
                              },
                              "id": {
                                "description": "ID used in database",
                                "format": "int32",
                                "type": "integer"
                              },
                              "name": {
                                "description": "TRES name (if applicable)",
                                "type": "string"
                              },
                              "type": {
                                "description": "TRES type (CPU, MEM, etc)",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "min": {
                  "properties": {
                    "priority_threshold": {
                      "description": "MinPrioThreshold",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "parent_account": {
                  "description": "Name of parent account",
                  "type": "string"
                },
                "partition": {
                  "description": "Partition name",
                  "type": "string"
                },
                "priority": {
                  "description": "Association priority factor",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "qos": {
                  "description": "List of available QOS names",
                  "items": {
                    "description": "List of QOS names",
                    "type": "string"
                  },
                  "type": "array"
                },
                "shares_raw": {
                  "description": "Allocated shares used for fairshare calculation",
                  "format": "int32",
                  "type": "integer"
                },
                "user": {
                  "description": "User name",
                  "type": "string"
                }
              },
              "required": [
                "user"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "clusters": {
            "description": "Clusters",
            "items": {
              "properties": {
                "associations": {
                  "properties": {
                    "root": {
                      "description": "Root association information",
                      "properties": {
                        "account": {
                          "description": "Account",
                          "type": "string"
                        },
                        "cluster": {
                          "description": "Cluster",
                          "type": "string"
                        },
                        "id": {
                          "description": "Numeric association ID",
                          "format": "int32",
                          "type": "integer"
                        },
                        "partition": {
                          "description": "Partition",
                          "type": "string"
                        },
                        "user": {
                          "description": "User name",
                          "type": "string"
                        }
                      },
                      "required": [
                        "user"
                      ],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "controller": {
                  "properties": {
                    "host": {
                      "description": "ControlHost",
                      "type": "string"
                    },
                    "port": {
                      "description": "ControlPort",
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "flags": {
                  "description": "Flags",
                  "items": {
                    "enum": [
                      "REGISTERING",
                      "MULTIPLE_SLURMD",
                      "FRONT_END",
                      "FEDERATION",
                      "EXTERNAL"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "ClusterName",
                  "type": "string"
                },
                "nodes": {
                  "description": "Node names",
                  "type": "string"
                },
                "rpc_version": {
                  "description": "RPC version used in the cluster",
                  "format": "int32",
                  "type": "integer"
                },
                "select_plugin": {
                  "deprecated": true,
                  "type": "string"
                },
                "tres": {
                  "description": "Trackable resources",
                  "items": {
                    "properties": {
                      "count": {
                        "description": "TRES count (0 if listed generically)",
                        "format": "int64",
                        "type": "integer"
                      },
                      "id": {
                        "description": "ID used in database",
                        "format": "int32",
                        "type": "integer"
                      },
                      "name": {
                        "description": "TRES name (if applicable)",
                        "type": "string"
                      },
                      "type": {
                        "description": "TRES type (CPU, MEM, etc)",
                        "type": "string"
                      }
                    },
                    "required": [
                      "type"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "instances": {
            "description": "Instances",
            "items": {
              "properties": {
                "cluster": {
                  "description": "Cluster name",
                  "type": "string"
                },
                "extra": {
                  "description": "Arbitrary string used for node filtering if extra constraints are enabled",
                  "type": "string"
                },
                "instance_id": {
                  "description": "Cloud instance ID",
                  "type": "string"
                },
                "instance_type": {
                  "description": "Cloud instance type",
                  "type": "string"
                },
                "node_name": {
                  "description": "NodeName",
                  "type": "string"
                },
                "time": {
                  "properties": {
                    "time_end": {
                      "description": "When the instance will end (UNIX timestamp)",
                      "format": "int64",
                      "type": "integer"
                    },
                    "time_start": {
                      "description": "When the instance will start (UNIX timestamp)",
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "qos": {
            "description": "QOS",
            "items": {
              "properties": {
                "description": {
                  "description": "Arbitrary description",
                  "type": "string"
                },
                "flags": {
                  "description": "Flags, to avoid modifying current values specify NOT_SET",
                  "items": {
                    "enum": [
                      "NOT_SET",
                      "ADD",
                      "REMOVE",
                      "PARTITION_MINIMUM_NODE",
                      "PARTITION_MAXIMUM_NODE",
                      "PARTITION_TIME_LIMIT",
                      "ENFORCE_USAGE_THRESHOLD",
                      "NO_RESERVE",
                      "REQUIRED_RESERVATION",
                      "DENY_LIMIT",
                      "OVERRIDE_PARTITION_QOS",
                      "NO_DECAY",
                      "USAGE_FACTOR_SAFE",
                      "RELATIVE"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "id": {
                  "description": "Unique ID",
                  "format": "int32",
                  "type": "integer"
                },
                "limits": {
                  "properties": {
                    "factor": {
                      "description": "LimitFactor",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "double",
                          "type": "number"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "grace_time": {
                      "description": "GraceTime",
                      "format": "int32",
                      "type": "integer"
                    },
                    "max": {
                      "properties": {
                        "accruing": {
                          "properties": {
                            "per": {
                              "properties": {
                                "account": {
                                  "description": "MaxJobsAccruePerAccount",
                                  "properties": {
                                    "infinite": {
                                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                      "type": "boolean"
                                    },
                                    "number": {
                                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "set": {
                                      "description": "True if number has been set; False if number is unset",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [],
                                  "type": "object"
                                },
                                "user": {
                                  "description": "MaxJobsAccruePerUser",
                                  "properties": {
                                    "infinite": {
                                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                      "type": "boolean"
                                    },
                                    "number": {
                                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "set": {
                                      "description": "True if number has been set; False if number is unset",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "active_jobs": {
                          "properties": {
                            "accruing": {
                              "description": "GrpJobsAccrue",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            },
                            "count": {
                              "description": "GrpJobs",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "jobs": {
                          "properties": {
                            "active_jobs": {
                              "properties": {
                                "per": {
                                  "properties": {
                                    "account": {
                                      "description": "MaxJobsPerAccount",
                                      "properties": {
                                        "infinite": {
                                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                          "type": "boolean"
                                        },
                                        "number": {
                                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "set": {
                                          "description": "True if number has been set; False if number is unset",
                                          "type": "boolean"
                                        }
                                      },
                                      "required": [],
                                      "type": "object"
                                    },
                                    "user": {
                                      "description": "MaxJobsPerUser",
                                      "properties": {
                                        "infinite": {
                                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                          "type": "boolean"
                                        },
                                        "number": {
                                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "set": {
                                          "description": "True if number has been set; False if number is unset",
                                          "type": "boolean"
                                        }
                                      },
                                      "required": [],
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "per": {
                              "properties": {
                                "account": {
                                  "description": "MaxSubmitJobsPerAccount",
                                  "properties": {
                                    "infinite": {
                                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                      "type": "boolean"
                                    },
                                    "number": {
                                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "set": {
                                      "description": "True if number has been set; False if number is unset",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [],
                                  "type": "object"
                                },
                                "user": {
                                  "description": "MaxSubmitJobsPerUser",
                                  "properties": {
                                    "infinite": {
                                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                      "type": "boolean"
                                    },
                                    "number": {
                                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "set": {
                                      "description": "True if number has been set; False if number is unset",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "tres": {
                          "properties": {
                            "minutes": {
                              "properties": {
                                "per": {
                                  "properties": {
                                    "account": {
                                      "description": "MaxTRESRunMinsPerAccount",
                                      "items": {
                                        "properties": {
                                          "count": {
                                            "description": "TRES count (0 if listed generically)",
                                            "format": "int64",
                                            "type": "integer"
                                          },
                                          "id": {
                                            "description": "ID used in database",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "name": {
                                            "description": "TRES name (if applicable)",
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "TRES type (CPU, MEM, etc)",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "job": {
                                      "description": "MaxTRESMinsPerJob",
                                      "items": {
                                        "properties": {
                                          "count": {
                                            "description": "TRES count (0 if listed generically)",
                                            "format": "int64",
                                            "type": "integer"
                                          },
                                          "id": {
                                            "description": "ID used in database",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "name": {
                                            "description": "TRES name (if applicable)",
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "TRES type (CPU, MEM, etc)",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "qos": {
                                      "description": "GrpTRESRunMins",
                                      "items": {
                                        "properties": {
                                          "count": {
                                            "description": "TRES count (0 if listed generically)",
                                            "format": "int64",
                                            "type": "integer"
                                          },
                                          "id": {
                                            "description": "ID used in database",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "name": {
                                            "description": "TRES name (if applicable)",
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "TRES type (CPU, MEM, etc)",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "user": {
                                      "description": "MaxTRESRunMinsPerUser",
                                      "items": {
                                        "properties": {
                                          "count": {
                                            "description": "TRES count (0 if listed generically)",
                                            "format": "int64",
                                            "type": "integer"
                                          },
                                          "id": {
                                            "description": "ID used in database",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "name": {
                                            "description": "TRES name (if applicable)",
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "TRES type (CPU, MEM, etc)",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "per": {
                              "properties": {
                                "account": {
                                  "description": "MaxTRESPerAccount",
                                  "items": {
                                    "properties": {
                                      "count": {
                                        "description": "TRES count (0 if listed generically)",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "ID used in database",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "TRES name (if applicable)",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "TRES type (CPU, MEM, etc)",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "job": {
                                  "description": "MaxTRESPerJob",
                                  "items": {
                                    "properties": {
                                      "count": {
                                        "description": "TRES count (0 if listed generically)",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "ID used in database",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "TRES name (if applicable)",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "TRES type (CPU, MEM, etc)",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "node": {
                                  "description": "MaxTRESPerNode",
                                  "items": {
                                    "properties": {
                                      "count": {
                                        "description": "TRES count (0 if listed generically)",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "ID used in database",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "TRES name (if applicable)",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "TRES type (CPU, MEM, etc)",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "user": {
                                  "description": "MaxTRESPerUser",
                                  "items": {
                                    "properties": {
                                      "count": {
                                        "description": "TRES count (0 if listed generically)",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "ID used in database",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "TRES name (if applicable)",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "TRES type (CPU, MEM, etc)",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "total": {
                              "description": "GrpTRES",
                              "items": {
                                "properties": {
                                  "count": {
                                    "description": "TRES count (0 if listed generically)",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "ID used in database",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "TRES name (if applicable)",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "TRES type (CPU, MEM, etc)",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "wall_clock": {
                          "properties": {
                            "per": {
                              "properties": {
                                "job": {
                                  "description": "MaxWallDurationPerJob",
                                  "properties": {
                                    "infinite": {
                                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                      "type": "boolean"
                                    },
                                    "number": {
                                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "set": {
                                      "description": "True if number has been set; False if number is unset",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [],
                                  "type": "object"
                                },
                                "qos": {
                                  "description": "GrpWall",
                                  "properties": {
                                    "infinite": {
                                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                      "type": "boolean"
                                    },
                                    "number": {
                                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "set": {
                                      "description": "True if number has been set; False if number is unset",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "min": {
                      "properties": {
                        "priority_threshold": {
                          "description": "MinPrioThreshold",
                          "properties": {
                            "infinite": {
                              "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                              "type": "boolean"
                            },
                            "number": {
                              "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                              "format": "int32",
                              "type": "integer"
                            },
                            "set": {
                              "description": "True if number has been set; False if number is unset",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "tres": {
                          "properties": {
                            "per": {
                              "properties": {
                                "job": {
                                  "description": "MinTRES",
                                  "items": {
                                    "properties": {
                                      "count": {
                                        "description": "TRES count (0 if listed generically)",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "ID used in database",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "TRES name (if applicable)",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "TRES type (CPU, MEM, etc)",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "name": {
                  "description": "Name",
                  "type": "string"
                },
                "preempt": {
                  "properties": {
                    "exempt_time": {
                      "description": "PreemptExemptTime",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "list": {
                      "description": "Other QOS's this QOS can preempt",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "mode": {
                      "description": "PreemptMode",
                      "items": {
                        "enum": [
                          "DISABLED",
                          "SUSPEND",
                          "REQUEUE",
                          "CANCEL",
                          "GANG"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "priority": {
                  "description": "Priority",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "usage_factor": {
                  "description": "UsageFactor",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "double",
                      "type": "number"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "usage_threshold": {
                  "description": "UsageThreshold",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "double",
                      "type": "number"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "tres": {
            "description": "TRES",
            "items": {
              "properties": {
                "count": {
                  "description": "TRES count (0 if listed generically)",
                  "format": "int64",
                  "type": "integer"
                },
                "id": {
                  "description": "ID used in database",
                  "format": "int32",
                  "type": "integer"
                },
                "name": {
                  "description": "TRES name (if applicable)",
                  "type": "string"
                },
                "type": {
                  "description": "TRES type (CPU, MEM, etc)",
                  "type": "string"
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "users": {
            "description": "Users",
            "items": {
              "properties": {
                "administrator_level": {
                  "description": "AdminLevel granted to the user",
                  "items": {
                    "enum": [
                      "Not Set",
                      "None",
                      "Operator",
                      "Administrator"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "associations": {
                  "description": "Associations created for this user",
                  "items": {
                    "properties": {
                      "account": {
                        "description": "Account",
                        "type": "string"
                      },
                      "cluster": {
                        "description": "Cluster",
                        "type": "string"
                      },
                      "id": {
                        "description": "Numeric association ID",
                        "format": "int32",
                        "type": "integer"
                      },
                      "partition": {
                        "description": "Partition",
                        "type": "string"
                      },
                      "user": {
                        "description": "User name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "user"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "coordinators": {
                  "description": "Accounts this user is a coordinator for",
                  "items": {
                    "properties": {
                      "direct": {
                        "description": "Indicates whether the coordinator was directly assigned to this account",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "User name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "default": {
                  "properties": {
                    "account": {
                      "description": "Default Account",
                      "type": "string"
                    },
                    "wckey": {
                      "description": "Default WCKey",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "flags": {
                  "description": "Flags associated with user",
                  "items": {
                    "enum": [
                      "NONE",
                      "DELETED"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "User name",
                  "type": "string"
                },
                "old_name": {
                  "description": "Previous user name",
                  "type": "string"
                },
                "wckeys": {
                  "description": "List of available WCKeys",
                  "items": {
                    "properties": {
                      "accounting": {
                        "description": "Accounting records containing related resource usage",
                        "items": {
                          "properties": {
                            "TRES": {
                              "description": "Trackable resources",
                              "properties": {
                                "count": {
                                  "description": "TRES count (0 if listed generically)",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "id": {
                                  "description": "ID used in database",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "TRES name (if applicable)",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "TRES type (CPU, MEM, etc)",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ],
                              "type": "object"
                            },
                            "allocated": {
                              "properties": {
                                "seconds": {
                                  "description": "Number of cpu seconds allocated",
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "id": {
                              "description": "Association ID or Workload characterization key ID",
                              "format": "int32",
                              "type": "integer"
                            },
                            "start": {
                              "description": "When the record was started",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "cluster": {
                        "description": "Cluster name",
                        "type": "string"
                      },
                      "flags": {
                        "description": "Flags associated with the WCKey",
                        "items": {
                          "enum": [
                            "DELETED"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "id": {
                        "description": "Unique ID for this user-cluster-wckey combination",
                        "format": "int32",
                        "type": "integer"
                      },
                      "name": {
                        "description": "WCKey name",
                        "type": "string"
                      },
                      "user": {
                        "description": "User name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "cluster",
                      "name",
                      "user"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "wckeys": {
            "description": "WCKeys",
            "items": {
              "properties": {
                "accounting": {
                  "description": "Accounting records containing related resource usage",
                  "items": {
                    "properties": {
                      "TRES": {
                        "description": "Trackable resources",
                        "properties": {
                          "count": {
                            "description": "TRES count (0 if listed generically)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "id": {
                            "description": "ID used in database",
                            "format": "int32",
                            "type": "integer"
                          },
                          "name": {
                            "description": "TRES name (if applicable)",
                            "type": "string"
                          },
                          "type": {
                            "description": "TRES type (CPU, MEM, etc)",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "allocated": {
                        "properties": {
                          "seconds": {
                            "description": "Number of cpu seconds allocated",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "Association ID or Workload characterization key ID",
                        "format": "int32",
                        "type": "integer"
                      },
                      "start": {
                        "description": "When the record was started",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "type": "array"
                },
                "cluster": {
                  "description": "Cluster name",
                  "type": "string"
                },
                "flags": {
                  "description": "Flags associated with the WCKey",
                  "items": {
                    "enum": [
                      "DELETED"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "id": {
                  "description": "Unique ID for this user-cluster-wckey combination",
                  "format": "int32",
                  "type": "integer"
                },
                "name": {
                  "description": "WCKey name",
                  "type": "string"
                },
                "user": {
                  "description": "User name",
                  "type": "string"
                }
              },
              "required": [
                "cluster",
                "name",
                "user"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [],
        "type": "object"
      },
      "v0.0.41_openapi_slurmdbd_jobs_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "jobs": {
            "description": "jobs",
            "items": {
              "properties": {
                "account": {
                  "description": "Account the job ran under",
                  "type": "string"
                },
                "allocation_nodes": {
                  "description": "List of nodes allocated to the job",
                  "format": "int32",
                  "type": "integer"
                },
                "array": {
                  "properties": {
                    "job_id": {
                      "description": "Job ID of job array, or 0 if N/A",
                      "format": "int32",
                      "type": "integer"
                    },
                    "limits": {
                      "properties": {
                        "max": {
                          "properties": {
                            "running": {
                              "properties": {
                                "tasks": {
                                  "description": "Maximum number of simultaneously running tasks, 0 if no limit",
                                  "format": "int32",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "task": {
                      "description": "String expression of task IDs in this record",
                      "type": "string"
                    },
                    "task_id": {
                      "description": "Task ID of this task in job array",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "association": {
                  "description": "Unique identifier for the association",
                  "properties": {
                    "account": {
                      "description": "Account",
                      "type": "string"
                    },
                    "cluster": {
                      "description": "Cluster",
                      "type": "string"
                    },
                    "id": {
                      "description": "Numeric association ID",
                      "format": "int32",
                      "type": "integer"
                    },
                    "partition": {
                      "description": "Partition",
                      "type": "string"
                    },
                    "user": {
                      "description": "User name",
                      "type": "string"
                    }
                  },
                  "required": [
                    "user"
                  ],
                  "type": "object"
                },
                "block": {
                  "description": "The name of the block to be used (used with Blue Gene systems)",
                  "type": "string"
                },
                "cluster": {
                  "description": "Cluster name",
                  "type": "string"
                },
                "comment": {
                  "properties": {
                    "administrator": {
                      "description": "Arbitrary comment made by administrator",
                      "type": "string"
                    },
                    "job": {
                      "description": "Arbitrary comment made by user",
                      "type": "string"
                    },
                    "system": {
                      "description": "Arbitrary comment from slurmctld",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "constraints": {
                  "description": "Feature(s) the job requested as a constraint",
                  "type": "string"
                },
                "container": {
                  "description": "Absolute path to OCI container bundle",
                  "type": "string"
                },
                "derived_exit_code": {
                  "description": "Highest exit code of all job steps",
                  "properties": {
                    "return_code": {
                      "description": "Process return code (numeric)",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "signal": {
                      "properties": {
                        "id": {
                          "description": "Signal sent to process (numeric)",
                          "properties": {
                            "infinite": {
                              "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                              "type": "boolean"
                            },
                            "number": {
                              "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                              "format": "int32",
                              "type": "integer"
                            },
                            "set": {
                              "description": "True if number has been set; False if number is unset",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "name": {
                          "description": "Signal sent to process",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "Status given by return code",
                      "items": {
                        "enum": [
                          "INVALID",
                          "PENDING",
                          "SUCCESS",
                          "ERROR",
                          "SIGNALED",
                          "CORE_DUMPED"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "exit_code": {
                  "description": "Exit code",
                  "properties": {
                    "return_code": {
                      "description": "Process return code (numeric)",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "signal": {
                      "properties": {
                        "id": {
                          "description": "Signal sent to process (numeric)",
                          "properties": {
                            "infinite": {
                              "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                              "type": "boolean"
                            },
                            "number": {
                              "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                              "format": "int32",
                              "type": "integer"
                            },
                            "set": {
                              "description": "True if number has been set; False if number is unset",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "name": {
                          "description": "Signal sent to process",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "status": {
                      "description": "Status given by return code",
                      "items": {
                        "enum": [
                          "INVALID",
                          "PENDING",
                          "SUCCESS",
                          "ERROR",
                          "SIGNALED",
                          "CORE_DUMPED"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "extra": {
                  "description": "Arbitrary string used for node filtering if extra constraints are enabled",
                  "type": "string"
                },
                "failed_node": {
                  "description": "Name of node that caused job failure",
                  "type": "string"
                },
                "flags": {
                  "description": "Flags associated with the job",
                  "items": {
                    "enum": [
                      "NONE",
                      "CLEAR_SCHEDULING",
                      "NOT_SET",
                      "STARTED_ON_SUBMIT",
                      "STARTED_ON_SCHEDULE",
                      "STARTED_ON_BACKFILL",
                      "START_RECEIVED"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "group": {
                  "description": "Group ID of the user that owns the job",
                  "type": "string"
                },
                "het": {
                  "properties": {
                    "job_id": {
                      "description": "Heterogeneous job ID, if applicable",
                      "format": "int32",
                      "type": "integer"
                    },
                    "job_offset": {
                      "description": "Unique sequence number applied to this component of the heterogeneous job",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "hold": {
                  "description": "Hold (true) or release (false) job",
                  "type": "boolean"
                },
                "job_id": {
                  "description": "Job ID",
                  "format": "int32",
                  "type": "integer"
                },
                "kill_request_user": {
                  "description": "User ID that requested termination of the job",
                  "type": "string"
                },
                "licenses": {
                  "description": "License(s) required by the job",
                  "type": "string"
                },
                "mcs": {
                  "properties": {
                    "label": {
                      "description": "Multi-Category Security label on the job",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "name": {
                  "description": "Job name",
                  "type": "string"
                },
                "nodes": {
                  "description": "Node(s) allocated to the job",
                  "type": "string"
                },
                "partition": {
                  "description": "Partition assigned to the job",
                  "type": "string"
                },
                "priority": {
                  "description": "Request specific job priority",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "qos": {
                  "description": "Quality of Service assigned to the job",
                  "type": "string"
                },
                "required": {
                  "properties": {
                    "CPUs": {
                      "description": "Minimum number of CPUs required",
                      "format": "int32",
                      "type": "integer"
                    },
                    "memory_per_cpu": {
                      "description": "Minimum memory in megabytes per allocated CPU",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int64",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "memory_per_node": {
                      "description": "Minimum memory in megabytes per allocated node",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int64",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "reservation": {
                  "properties": {
                    "id": {
                      "description": "Unique identifier of requested reservation",
                      "format": "int32",
                      "type": "integer"
                    },
                    "name": {
                      "description": "Name of reservation to use",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "script": {
                  "description": "Job batch script; only the first component in a HetJob is populated or honored",
                  "type": "string"
                },
                "state": {
                  "properties": {
                    "current": {
                      "description": "Current state",
                      "items": {
                        "enum": [
                          "PENDING",
                          "RUNNING",
                          "SUSPENDED",
                          "COMPLETED",
                          "CANCELLED",
                          "FAILED",
                          "TIMEOUT",
                          "NODE_FAIL",
                          "PREEMPTED",
                          "BOOT_FAIL",
                          "DEADLINE",
                          "OUT_OF_MEMORY",
                          "LAUNCH_FAILED",
                          "REQUEUED",
                          "REQUEUE_HOLD",
                          "SPECIAL_EXIT",
                          "RESIZING",
                          "CONFIGURING",
                          "COMPLETING",
                          "STOPPED",
                          "RECONFIG_FAIL",
                          "POWER_UP_NODE",
                          "REVOKED",
                          "REQUEUE_FED",
                          "RESV_DEL_HOLD",
                          "SIGNALING",
                          "STAGE_OUT"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "reason": {
                      "description": "Reason for previous Pending or Failed state",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "stderr": {
                  "description": "Path to stderr file",
                  "type": "string"
                },
                "stderr_expanded": {
                  "description": "Job stderr with expanded fields",
                  "type": "string"
                },
                "stdin": {
                  "description": "Path to stdin file",
                  "type": "string"
                },
                "stdin_expanded": {
                  "description": "Job stdin with expanded fields",
                  "type": "string"
                },
                "stdout": {
                  "description": "Path to stdout file",
                  "type": "string"
                },
                "stdout_expanded": {
                  "description": "Job stdout with expanded fields",
                  "type": "string"
                },
                "steps": {
                  "description": "Individual steps in the job",
                  "items": {
                    "properties": {
                      "CPU": {
                        "properties": {
                          "governor": {
                            "description": "Requested CPU frequency governor in kHz",
                            "type": "string"
                          },
                          "requested_frequency": {
                            "properties": {
                              "max": {
                                "description": "Maximum requested CPU frequency in kHz",
                                "properties": {
                                  "infinite": {
                                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                    "type": "boolean"
                                  },
                                  "number": {
                                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "set": {
                                    "description": "True if number has been set; False if number is unset",
                                    "type": "boolean"
                                  }
                                },
                                "required": [],
                                "type": "object"
                              },
                              "min": {
                                "description": "Minimum requested CPU frequency in kHz",
                                "properties": {
                                  "infinite": {
                                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                    "type": "boolean"
                                  },
                                  "number": {
                                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "set": {
                                    "description": "True if number has been set; False if number is unset",
                                    "type": "boolean"
                                  }
                                },
                                "required": [],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "exit_code": {
                        "description": "Exit code",
                        "properties": {
                          "return_code": {
                            "description": "Process return code (numeric)",
                            "properties": {
                              "infinite": {
                                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                "type": "boolean"
                              },
                              "number": {
                                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                "format": "int32",
                                "type": "integer"
                              },
                              "set": {
                                "description": "True if number has been set; False if number is unset",
                                "type": "boolean"
                              }
                            },
                            "required": [],
                            "type": "object"
                          },
                          "signal": {
                            "properties": {
                              "id": {
                                "description": "Signal sent to process (numeric)",
                                "properties": {
                                  "infinite": {
                                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                    "type": "boolean"
                                  },
                                  "number": {
                                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "set": {
                                    "description": "True if number has been set; False if number is unset",
                                    "type": "boolean"
                                  }
                                },
                                "required": [],
                                "type": "object"
                              },
                              "name": {
                                "description": "Signal sent to process",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "status": {
                            "description": "Status given by return code",
                            "items": {
                              "enum": [
                                "INVALID",
                                "PENDING",
                                "SUCCESS",
                                "ERROR",
                                "SIGNALED",
                                "CORE_DUMPED"
                              ],
                              "type": "string"
                            },
                            "type": "array"
                          }
                        },
                        "required": [],
                        "type": "object"
                      },
                      "kill_request_user": {
                        "description": "User ID that requested termination of the step",
                        "type": "string"
                      },
                      "nodes": {
                        "properties": {
                          "count": {
                            "description": "Number of nodes in the job step",
                            "format": "int32",
                            "type": "integer"
                          },
                          "list": {
                            "description": "List of nodes used by the step",
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "range": {
                            "description": "Node(s) allocated to the job step",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "pid": {
                        "description": "Process ID",
                        "type": "string"
                      },
                      "state": {
                        "description": "Current state",
                        "items": {
                          "enum": [
                            "PENDING",
                            "RUNNING",
                            "SUSPENDED",
                            "COMPLETED",
                            "CANCELLED",
                            "FAILED",
                            "TIMEOUT",
                            "NODE_FAIL",
                            "PREEMPTED",
                            "BOOT_FAIL",
                            "DEADLINE",
                            "OUT_OF_MEMORY",
                            "LAUNCH_FAILED",
                            "REQUEUED",
                            "REQUEUE_HOLD",
                            "SPECIAL_EXIT",
                            "RESIZING",
                            "CONFIGURING",
                            "COMPLETING",
                            "STOPPED",
                            "RECONFIG_FAIL",
                            "POWER_UP_NODE",
                            "REVOKED",
                            "REQUEUE_FED",
                            "RESV_DEL_HOLD",
                            "SIGNALING",
                            "STAGE_OUT"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "statistics": {
                        "properties": {
                          "CPU": {
                            "properties": {
                              "actual_frequency": {
                                "description": "Average weighted CPU frequency of all tasks in kHz",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "energy": {
                            "properties": {
                              "consumed": {
                                "description": "Total energy consumed by all tasks in a job in joules",
                                "properties": {
                                  "infinite": {
                                    "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                    "type": "boolean"
                                  },
                                  "number": {
                                    "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "set": {
                                    "description": "True if number has been set; False if number is unset",
                                    "type": "boolean"
                                  }
                                },
                                "required": [],
                                "type": "object"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "step": {
                        "properties": {
                          "id": {
                            "description": "Step ID",
                            "type": "string"
                          },
                          "name": {
                            "description": "Step name",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "task": {
                        "properties": {
                          "distribution": {
                            "description": "The layout of the step was when it was running",
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "tasks": {
                        "properties": {
                          "count": {
                            "description": "Total number of tasks",
                            "format": "int32",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "time": {
                        "properties": {
                          "elapsed": {
                            "description": "Elapsed time in seconds",
                            "format": "int32",
                            "type": "integer"
                          },
                          "end": {
                            "description": "End time (UNIX timestamp)",
                            "properties": {
                              "infinite": {
                                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                "type": "boolean"
                              },
                              "number": {
                                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                "format": "int64",
                                "type": "integer"
                              },
                              "set": {
                                "description": "True if number has been set; False if number is unset",
                                "type": "boolean"
                              }
                            },
                            "required": [],
                            "type": "object"
                          },
                          "start": {
                            "description": "Time execution began (UNIX timestamp)",
                            "properties": {
                              "infinite": {
                                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                "type": "boolean"
                              },
                              "number": {
                                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                "format": "int64",
                                "type": "integer"
                              },
                              "set": {
                                "description": "True if number has been set; False if number is unset",
                                "type": "boolean"
                              }
                            },
                            "required": [],
                            "type": "object"
                          },
                          "suspended": {
                            "description": "Time in suspended state in seconds",
                            "format": "int32",
                            "type": "integer"
                          },
                          "system": {
                            "properties": {
                              "microseconds": {
                                "description": "System CPU time used by the step in microseconds",
                                "format": "int32",
                                "type": "integer"
                              },
                              "seconds": {
                                "description": "System CPU time used by the step in seconds",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "total": {
                            "properties": {
                              "microseconds": {
                                "description": "Total CPU time used by the step in microseconds",
                                "format": "int32",
                                "type": "integer"
                              },
                              "seconds": {
                                "description": "Total CPU time used by the step in seconds",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          },
                          "user": {
                            "properties": {
                              "microseconds": {
                                "description": "User CPU time used by the step in microseconds",
                                "format": "int32",
                                "type": "integer"
                              },
                              "seconds": {
                                "description": "User CPU time used by the step in seconds",
                                "format": "int64",
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "tres": {
                        "properties": {
                          "allocated": {
                            "description": "Trackable resources allocated to the step",
                            "items": {
                              "properties": {
                                "count": {
                                  "description": "TRES count (0 if listed generically)",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "id": {
                                  "description": "ID used in database",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "TRES name (if applicable)",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "TRES type (CPU, MEM, etc)",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ],
                              "type": "object"
                            },
                            "type": "array"
                          },
                          "consumed": {
                            "properties": {
                              "average": {
                                "description": "Average TRES usage consumed among all tasks",
                                "items": {
                                  "properties": {
                                    "count": {
                                      "description": "TRES count (0 if listed generically)",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "id": {
                                      "description": "ID used in database",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "TRES name (if applicable)",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "TRES type (CPU, MEM, etc)",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "max": {
                                "description": "Maximum TRES usage consumed among all tasks",
                                "items": {
                                  "properties": {
                                    "count": {
                                      "description": "TRES count (0 if listed generically)",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "id": {
                                      "description": "ID used in database",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "TRES name (if applicable)",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "TRES type (CPU, MEM, etc)",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "min": {
                                "description": "Minimum TRES usage consumed among all tasks",
                                "items": {
                                  "properties": {
                                    "count": {
                                      "description": "TRES count (0 if listed generically)",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "id": {
                                      "description": "ID used in database",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "TRES name (if applicable)",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "TRES type (CPU, MEM, etc)",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "total": {
                                "description": "Total TRES usage consumed among all tasks",
                                "items": {
                                  "properties": {
                                    "count": {
                                      "description": "TRES count (0 if listed generically)",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "id": {
                                      "description": "ID used in database",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "TRES name (if applicable)",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "TRES type (CPU, MEM, etc)",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          },
                          "requested": {
                            "properties": {
                              "average": {
                                "description": "Average TRES usage requested among all tasks",
                                "items": {
                                  "properties": {
                                    "count": {
                                      "description": "TRES count (0 if listed generically)",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "id": {
                                      "description": "ID used in database",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "TRES name (if applicable)",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "TRES type (CPU, MEM, etc)",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "max": {
                                "description": "Maximum TRES usage requested among all tasks",
                                "items": {
                                  "properties": {
                                    "count": {
                                      "description": "TRES count (0 if listed generically)",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "id": {
                                      "description": "ID used in database",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "TRES name (if applicable)",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "TRES type (CPU, MEM, etc)",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "min": {
                                "description": "Minimum TRES usage requested among all tasks",
                                "items": {
                                  "properties": {
                                    "count": {
                                      "description": "TRES count (0 if listed generically)",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "id": {
                                      "description": "ID used in database",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "TRES name (if applicable)",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "TRES type (CPU, MEM, etc)",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              },
                              "total": {
                                "description": "Total TRES usage requested among all tasks",
                                "items": {
                                  "properties": {
                                    "count": {
                                      "description": "TRES count (0 if listed generically)",
                                      "format": "int64",
                                      "type": "integer"
                                    },
                                    "id": {
                                      "description": "ID used in database",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "name": {
                                      "description": "TRES name (if applicable)",
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "TRES type (CPU, MEM, etc)",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ],
                                  "type": "object"
                                },
                                "type": "array"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "type": "array"
                },
                "submit_line": {
                  "description": "Command used to submit the job",
                  "type": "string"
                },
                "time": {
                  "properties": {
                    "elapsed": {
                      "description": "Elapsed time in seconds",
                      "format": "int32",
                      "type": "integer"
                    },
                    "eligible": {
                      "description": "Time when the job became eligible to run (UNIX timestamp)",
                      "format": "int64",
                      "type": "integer"
                    },
                    "end": {
                      "description": "End time (UNIX timestamp)",
                      "format": "int64",
                      "type": "integer"
                    },
                    "limit": {
                      "description": "Maximum run time in minutes",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "planned": {
                      "description": "Time required to start job after becoming eligible to run in seconds",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int64",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "start": {
                      "description": "Time execution began (UNIX timestamp)",
                      "format": "int64",
                      "type": "integer"
                    },
                    "submission": {
                      "description": "Time when the job was submitted (UNIX timestamp)",
                      "format": "int64",
                      "type": "integer"
                    },
                    "suspended": {
                      "description": "Total time in suspended state in seconds",
                      "format": "int32",
                      "type": "integer"
                    },
                    "system": {
                      "properties": {
                        "microseconds": {
                          "description": "System CPU time used by the job in microseconds",
                          "format": "int64",
                          "type": "integer"
                        },
                        "seconds": {
                          "description": "System CPU time used by the job in seconds",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "total": {
                      "properties": {
                        "microseconds": {
                          "description": "Sum of System and User CPU time used by the job in microseconds",
                          "format": "int64",
                          "type": "integer"
                        },
                        "seconds": {
                          "description": "Sum of System and User CPU time used by the job in seconds",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "user": {
                      "properties": {
                        "microseconds": {
                          "description": "User CPU time used by the job in microseconds",
                          "format": "int64",
                          "type": "integer"
                        },
                        "seconds": {
                          "description": "User CPU time used by the job in seconds",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "tres": {
                  "properties": {
                    "allocated": {
                      "description": "Trackable resources allocated to the job",
                      "items": {
                        "properties": {
                          "count": {
                            "description": "TRES count (0 if listed generically)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "id": {
                            "description": "ID used in database",
                            "format": "int32",
                            "type": "integer"
                          },
                          "name": {
                            "description": "TRES name (if applicable)",
                            "type": "string"
                          },
                          "type": {
                            "description": "TRES type (CPU, MEM, etc)",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "requested": {
                      "description": "Trackable resources requested by job",
                      "items": {
                        "properties": {
                          "count": {
                            "description": "TRES count (0 if listed generically)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "id": {
                            "description": "ID used in database",
                            "format": "int32",
                            "type": "integer"
                          },
                          "name": {
                            "description": "TRES name (if applicable)",
                            "type": "string"
                          },
                          "type": {
                            "description": "TRES type (CPU, MEM, etc)",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "used_gres": {
                  "description": "Generic resources used by job",
                  "type": "string"
                },
                "user": {
                  "description": "User that owns the job",
                  "type": "string"
                },
                "wckey": {
                  "description": "Workload characterization key",
                  "properties": {
                    "flags": {
                      "description": "Active flags",
                      "items": {
                        "enum": [
                          "ASSIGNED_DEFAULT"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "wckey": {
                      "description": "WCKey name",
                      "type": "string"
                    }
                  },
                  "required": [
                    "wckey",
                    "flags"
                  ],
                  "type": "object"
                },
                "working_directory": {
                  "description": "Path to current working directory",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "jobs"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_slurmdbd_qos_removed_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "removed_qos": {
            "description": "removed QOS",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "removed_qos"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_slurmdbd_qos_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "qos": {
            "description": "List of QOS",
            "items": {
              "properties": {
                "description": {
                  "description": "Arbitrary description",
                  "type": "string"
                },
                "flags": {
                  "description": "Flags, to avoid modifying current values specify NOT_SET",
                  "items": {
                    "enum": [
                      "NOT_SET",
                      "ADD",
                      "REMOVE",
                      "PARTITION_MINIMUM_NODE",
                      "PARTITION_MAXIMUM_NODE",
                      "PARTITION_TIME_LIMIT",
                      "ENFORCE_USAGE_THRESHOLD",
                      "NO_RESERVE",
                      "REQUIRED_RESERVATION",
                      "DENY_LIMIT",
                      "OVERRIDE_PARTITION_QOS",
                      "NO_DECAY",
                      "USAGE_FACTOR_SAFE",
                      "RELATIVE"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "id": {
                  "description": "Unique ID",
                  "format": "int32",
                  "type": "integer"
                },
                "limits": {
                  "properties": {
                    "factor": {
                      "description": "LimitFactor",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "double",
                          "type": "number"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "grace_time": {
                      "description": "GraceTime",
                      "format": "int32",
                      "type": "integer"
                    },
                    "max": {
                      "properties": {
                        "accruing": {
                          "properties": {
                            "per": {
                              "properties": {
                                "account": {
                                  "description": "MaxJobsAccruePerAccount",
                                  "properties": {
                                    "infinite": {
                                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                      "type": "boolean"
                                    },
                                    "number": {
                                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "set": {
                                      "description": "True if number has been set; False if number is unset",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [],
                                  "type": "object"
                                },
                                "user": {
                                  "description": "MaxJobsAccruePerUser",
                                  "properties": {
                                    "infinite": {
                                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                      "type": "boolean"
                                    },
                                    "number": {
                                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "set": {
                                      "description": "True if number has been set; False if number is unset",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "active_jobs": {
                          "properties": {
                            "accruing": {
                              "description": "GrpJobsAccrue",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            },
                            "count": {
                              "description": "GrpJobs",
                              "properties": {
                                "infinite": {
                                  "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                  "type": "boolean"
                                },
                                "number": {
                                  "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "set": {
                                  "description": "True if number has been set; False if number is unset",
                                  "type": "boolean"
                                }
                              },
                              "required": [],
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "jobs": {
                          "properties": {
                            "active_jobs": {
                              "properties": {
                                "per": {
                                  "properties": {
                                    "account": {
                                      "description": "MaxJobsPerAccount",
                                      "properties": {
                                        "infinite": {
                                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                          "type": "boolean"
                                        },
                                        "number": {
                                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "set": {
                                          "description": "True if number has been set; False if number is unset",
                                          "type": "boolean"
                                        }
                                      },
                                      "required": [],
                                      "type": "object"
                                    },
                                    "user": {
                                      "description": "MaxJobsPerUser",
                                      "properties": {
                                        "infinite": {
                                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                          "type": "boolean"
                                        },
                                        "number": {
                                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                          "format": "int32",
                                          "type": "integer"
                                        },
                                        "set": {
                                          "description": "True if number has been set; False if number is unset",
                                          "type": "boolean"
                                        }
                                      },
                                      "required": [],
                                      "type": "object"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "per": {
                              "properties": {
                                "account": {
                                  "description": "MaxSubmitJobsPerAccount",
                                  "properties": {
                                    "infinite": {
                                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                      "type": "boolean"
                                    },
                                    "number": {
                                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "set": {
                                      "description": "True if number has been set; False if number is unset",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [],
                                  "type": "object"
                                },
                                "user": {
                                  "description": "MaxSubmitJobsPerUser",
                                  "properties": {
                                    "infinite": {
                                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                      "type": "boolean"
                                    },
                                    "number": {
                                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "set": {
                                      "description": "True if number has been set; False if number is unset",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        },
                        "tres": {
                          "properties": {
                            "minutes": {
                              "properties": {
                                "per": {
                                  "properties": {
                                    "account": {
                                      "description": "MaxTRESRunMinsPerAccount",
                                      "items": {
                                        "properties": {
                                          "count": {
                                            "description": "TRES count (0 if listed generically)",
                                            "format": "int64",
                                            "type": "integer"
                                          },
                                          "id": {
                                            "description": "ID used in database",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "name": {
                                            "description": "TRES name (if applicable)",
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "TRES type (CPU, MEM, etc)",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "job": {
                                      "description": "MaxTRESMinsPerJob",
                                      "items": {
                                        "properties": {
                                          "count": {
                                            "description": "TRES count (0 if listed generically)",
                                            "format": "int64",
                                            "type": "integer"
                                          },
                                          "id": {
                                            "description": "ID used in database",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "name": {
                                            "description": "TRES name (if applicable)",
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "TRES type (CPU, MEM, etc)",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "qos": {
                                      "description": "GrpTRESRunMins",
                                      "items": {
                                        "properties": {
                                          "count": {
                                            "description": "TRES count (0 if listed generically)",
                                            "format": "int64",
                                            "type": "integer"
                                          },
                                          "id": {
                                            "description": "ID used in database",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "name": {
                                            "description": "TRES name (if applicable)",
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "TRES type (CPU, MEM, etc)",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    },
                                    "user": {
                                      "description": "MaxTRESRunMinsPerUser",
                                      "items": {
                                        "properties": {
                                          "count": {
                                            "description": "TRES count (0 if listed generically)",
                                            "format": "int64",
                                            "type": "integer"
                                          },
                                          "id": {
                                            "description": "ID used in database",
                                            "format": "int32",
                                            "type": "integer"
                                          },
                                          "name": {
                                            "description": "TRES name (if applicable)",
                                            "type": "string"
                                          },
                                          "type": {
                                            "description": "TRES type (CPU, MEM, etc)",
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "type"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            },
                            "per": {
                              "properties": {
                                "account": {
                                  "description": "MaxTRESPerAccount",
                                  "items": {
                                    "properties": {
                                      "count": {
                                        "description": "TRES count (0 if listed generically)",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "ID used in database",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "TRES name (if applicable)",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "TRES type (CPU, MEM, etc)",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "job": {
                                  "description": "MaxTRESPerJob",
                                  "items": {
                                    "properties": {
                                      "count": {
                                        "description": "TRES count (0 if listed generically)",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "ID used in database",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "TRES name (if applicable)",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "TRES type (CPU, MEM, etc)",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "node": {
                                  "description": "MaxTRESPerNode",
                                  "items": {
                                    "properties": {
                                      "count": {
                                        "description": "TRES count (0 if listed generically)",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "ID used in database",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "TRES name (if applicable)",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "TRES type (CPU, MEM, etc)",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "user": {
                                  "description": "MaxTRESPerUser",
                                  "items": {
                                    "properties": {
                                      "count": {
                                        "description": "TRES count (0 if listed generically)",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "ID used in database",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "TRES name (if applicable)",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "TRES type (CPU, MEM, etc)",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            },
                            "total": {
                              "description": "GrpTRES",
                              "items": {
                                "properties": {
                                  "count": {
                                    "description": "TRES count (0 if listed generically)",
                                    "format": "int64",
                                    "type": "integer"
                                  },
                                  "id": {
                                    "description": "ID used in database",
                                    "format": "int32",
                                    "type": "integer"
                                  },
                                  "name": {
                                    "description": "TRES name (if applicable)",
                                    "type": "string"
                                  },
                                  "type": {
                                    "description": "TRES type (CPU, MEM, etc)",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        },
                        "wall_clock": {
                          "properties": {
                            "per": {
                              "properties": {
                                "job": {
                                  "description": "MaxWallDurationPerJob",
                                  "properties": {
                                    "infinite": {
                                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                      "type": "boolean"
                                    },
                                    "number": {
                                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "set": {
                                      "description": "True if number has been set; False if number is unset",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [],
                                  "type": "object"
                                },
                                "qos": {
                                  "description": "GrpWall",
                                  "properties": {
                                    "infinite": {
                                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                                      "type": "boolean"
                                    },
                                    "number": {
                                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                                      "format": "int32",
                                      "type": "integer"
                                    },
                                    "set": {
                                      "description": "True if number has been set; False if number is unset",
                                      "type": "boolean"
                                    }
                                  },
                                  "required": [],
                                  "type": "object"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "min": {
                      "properties": {
                        "priority_threshold": {
                          "description": "MinPrioThreshold",
                          "properties": {
                            "infinite": {
                              "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                              "type": "boolean"
                            },
                            "number": {
                              "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                              "format": "int32",
                              "type": "integer"
                            },
                            "set": {
                              "description": "True if number has been set; False if number is unset",
                              "type": "boolean"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "tres": {
                          "properties": {
                            "per": {
                              "properties": {
                                "job": {
                                  "description": "MinTRES",
                                  "items": {
                                    "properties": {
                                      "count": {
                                        "description": "TRES count (0 if listed generically)",
                                        "format": "int64",
                                        "type": "integer"
                                      },
                                      "id": {
                                        "description": "ID used in database",
                                        "format": "int32",
                                        "type": "integer"
                                      },
                                      "name": {
                                        "description": "TRES name (if applicable)",
                                        "type": "string"
                                      },
                                      "type": {
                                        "description": "TRES type (CPU, MEM, etc)",
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "name": {
                  "description": "Name",
                  "type": "string"
                },
                "preempt": {
                  "properties": {
                    "exempt_time": {
                      "description": "PreemptExemptTime",
                      "properties": {
                        "infinite": {
                          "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                          "type": "boolean"
                        },
                        "number": {
                          "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                          "format": "int32",
                          "type": "integer"
                        },
                        "set": {
                          "description": "True if number has been set; False if number is unset",
                          "type": "boolean"
                        }
                      },
                      "required": [],
                      "type": "object"
                    },
                    "list": {
                      "description": "Other QOS's this QOS can preempt",
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "mode": {
                      "description": "PreemptMode",
                      "items": {
                        "enum": [
                          "DISABLED",
                          "SUSPEND",
                          "REQUEUE",
                          "CANCEL",
                          "GANG"
                        ],
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                },
                "priority": {
                  "description": "Priority",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "int32",
                      "type": "integer"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "usage_factor": {
                  "description": "UsageFactor",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "double",
                      "type": "number"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "usage_threshold": {
                  "description": "UsageThreshold",
                  "properties": {
                    "infinite": {
                      "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                      "type": "boolean"
                    },
                    "number": {
                      "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                      "format": "double",
                      "type": "number"
                    },
                    "set": {
                      "description": "True if number has been set; False if number is unset",
                      "type": "boolean"
                    }
                  },
                  "required": [],
                  "type": "object"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "qos"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_slurmdbd_stats_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "statistics": {
            "description": "statistics",
            "properties": {
              "RPCs": {
                "description": "List of RPCs sent to the slurmdbd",
                "items": {
                  "properties": {
                    "count": {
                      "description": "Number of RPCs processed",
                      "format": "int32",
                      "type": "integer"
                    },
                    "rpc": {
                      "description": "RPC type",
                      "type": "string"
                    },
                    "time": {
                      "properties": {
                        "average": {
                          "description": "Average RPC processing time in microseconds",
                          "format": "int64",
                          "type": "integer"
                        },
                        "total": {
                          "description": "Total RPC processing time in microseconds",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "type": "array"
              },
              "rollups": {
                "description": "Rollup statistics",
                "properties": {
                  "daily": {
                    "properties": {
                      "count": {
                        "description": "Number of daily rollups since last_run",
                        "format": "int32",
                        "type": "integer"
                      },
                      "duration": {
                        "properties": {
                          "last": {
                            "description": "Total time spent doing daily daily rollup (seconds)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "max": {
                            "description": "Longest daily rollup time (seconds)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "time": {
                            "description": "Total time spent doing daily rollups (seconds)",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "last_run": {
                        "description": "Last time daily rollup ran (UNIX timestamp)",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "hourly": {
                    "properties": {
                      "count": {
                        "description": "Number of hourly rollups since last_run",
                        "format": "int32",
                        "type": "integer"
                      },
                      "duration": {
                        "properties": {
                          "last": {
                            "description": "Total time spent doing last daily rollup (seconds)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "max": {
                            "description": "Longest hourly rollup time (seconds)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "time": {
                            "description": "Total time spent doing hourly rollups (seconds)",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "last_run": {
                        "description": "Last time hourly rollup ran (UNIX timestamp)",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "monthly": {
                    "properties": {
                      "count": {
                        "description": "Number of monthly rollups since last_run",
                        "format": "int32",
                        "type": "integer"
                      },
                      "duration": {
                        "properties": {
                          "last": {
                            "description": "Total time spent doing monthly daily rollup (seconds)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "max": {
                            "description": "Longest monthly rollup time (seconds)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "time": {
                            "description": "Total time spent doing monthly rollups (seconds)",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "last_run": {
                        "description": "Last time monthly rollup ran (UNIX timestamp)",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  }
                },
                "required": [
                  "hourly/count",
                  "daily/count",
                  "monthly/count",
                  "hourly/last_run",
                  "daily/last_run",
                  "monthly/last_run",
                  "hourly/duration/last",
                  "daily/duration/last",
                  "monthly/duration/last",
                  "hourly/duration/max",
                  "daily/duration/max",
                  "monthly/duration/max",
                  "hourly/duration/time",
                  "daily/duration/time",
                  "monthly/duration/time"
                ],
                "type": "object"
              },
              "time_start": {
                "description": "When data collection started (UNIX timestamp)",
                "format": "int64",
                "type": "integer"
              },
              "users": {
                "description": "List of users that issued RPCs",
                "items": {
                  "properties": {
                    "count": {
                      "description": "Number of RPCs processed",
                      "format": "int32",
                      "type": "integer"
                    },
                    "time": {
                      "properties": {
                        "average": {
                          "description": "Average RPC processing time in microseconds",
                          "format": "int64",
                          "type": "integer"
                        },
                        "total": {
                          "description": "Total RPC processing time in microseconds",
                          "format": "int64",
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "user": {
                      "description": "User ID",
                      "type": "string"
                    }
                  },
                  "required": [],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "statistics"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_tres_resp": {
        "properties": {
          "TRES": {
            "description": "TRES",
            "items": {
              "properties": {
                "count": {
                  "description": "TRES count (0 if listed generically)",
                  "format": "int64",
                  "type": "integer"
                },
                "id": {
                  "description": "ID used in database",
                  "format": "int32",
                  "type": "integer"
                },
                "name": {
                  "description": "TRES name (if applicable)",
                  "type": "string"
                },
                "type": {
                  "description": "TRES type (CPU, MEM, etc)",
                  "type": "string"
                }
              },
              "required": [
                "type"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "TRES"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_users_add_cond_resp": {
        "properties": {
          "association_condition": {
            "description": "Filters to select associations for users",
            "properties": {
              "accounts": {
                "description": "CSV accounts list",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "association": {
                "description": "Association limits and options",
                "properties": {
                  "comment": {
                    "description": "Arbitrary comment",
                    "type": "string"
                  },
                  "defaultqos": {
                    "description": "Default QOS",
                    "type": "string"
                  },
                  "fairshare": {
                    "description": "Allocated shares used for fairshare calculation",
                    "format": "int32",
                    "type": "integer"
                  },
                  "grpjobs": {
                    "description": "Maximum number of running jobs in this association and its children",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "grpjobsaccrue": {
                    "description": "Maximum number of pending jobs able to accrue age priority in this association and its children",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "grpsubmitjobs": {
                    "description": "Maximum number of jobs which can be in a pending or running state at any time in this association and its children",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "grptres": {
                    "description": "Maximum number of TRES able to be allocated by running jobs in this association and its children",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "grptresmins": {
                    "description": "Total number of TRES minutes that can possibly be used by past, present and future jobs in this association and its children",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "grptresrunmins": {
                    "description": "Maximum number of TRES minutes able to be allocated by running jobs in this association and its children",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "grpwall": {
                    "description": "Maximum wall clock time in minutes able to be allocated by running jobs in this association and its children",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "maxjobs": {
                    "description": "Maximum number of running jobs per user in this association",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "maxjobsaccrue": {
                    "description": "Maximum number of pending jobs able to accrue age priority at any given time in this association",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "maxsubmitjobs": {
                    "description": "Maximum number of jobs which can be in a pending or running state at any time in this association",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "maxtresminsperjob": {
                    "description": "Maximum number of TRES minutes each job is able to use in this association",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "maxtresperjob": {
                    "description": "Maximum number of TRES each job is able to use in this association",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "maxtrespernode": {
                    "description": "Maximum number of TRES each node is able to use",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "maxtresrunmins": {
                    "description": "Maximum number of TRES minutes able to be allocated by running jobs in this association",
                    "items": {
                      "properties": {
                        "count": {
                          "description": "TRES count (0 if listed generically)",
                          "format": "int64",
                          "type": "integer"
                        },
                        "id": {
                          "description": "ID used in database",
                          "format": "int32",
                          "type": "integer"
                        },
                        "name": {
                          "description": "TRES name (if applicable)",
                          "type": "string"
                        },
                        "type": {
                          "description": "TRES type (CPU, MEM, etc)",
                          "type": "string"
                        }
                      },
                      "required": [
                        "type"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "maxwalldurationperjob": {
                    "description": "Maximum wall clock time each job is able to use in this association",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "minpriothresh": {
                    "description": "Minimum priority required to reserve resources when scheduling",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "parent": {
                    "description": "Name of parent account",
                    "type": "string"
                  },
                  "priority": {
                    "description": "Association priority factor",
                    "properties": {
                      "infinite": {
                        "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                        "type": "boolean"
                      },
                      "number": {
                        "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                        "format": "int32",
                        "type": "integer"
                      },
                      "set": {
                        "description": "True if number has been set; False if number is unset",
                        "type": "boolean"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "qoslevel": {
                    "description": "List of available QOS names",
                    "items": {
                      "description": "List of QOS names",
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [],
                "type": "object"
              },
              "clusters": {
                "description": "CSV clusters list",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "partitions": {
                "description": "CSV partitions list",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "users": {
                "description": "CSV users list",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "wckeys": {
                "description": "CSV WCKeys list",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "required": [
              "users"
            ],
            "type": "object"
          },
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "user": {
            "description": "Admin level of user, DefaultAccount, DefaultWCKey",
            "properties": {
              "adminlevel": {
                "description": "AdminLevel granted to the user",
                "items": {
                  "enum": [
                    "Not Set",
                    "None",
                    "Operator",
                    "Administrator"
                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "defaultaccount": {
                "description": "Default account",
                "type": "string"
              },
              "defaultwckey": {
                "description": "Default WCKey",
                "type": "string"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "association_condition",
          "user"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_users_add_cond_resp_str": {
        "properties": {
          "added_users": {
            "description": "added_users",
            "type": "string"
          },
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "added_users"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_users_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "users": {
            "description": "users",
            "items": {
              "properties": {
                "administrator_level": {
                  "description": "AdminLevel granted to the user",
                  "items": {
                    "enum": [
                      "Not Set",
                      "None",
                      "Operator",
                      "Administrator"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "associations": {
                  "description": "Associations created for this user",
                  "items": {
                    "properties": {
                      "account": {
                        "description": "Account",
                        "type": "string"
                      },
                      "cluster": {
                        "description": "Cluster",
                        "type": "string"
                      },
                      "id": {
                        "description": "Numeric association ID",
                        "format": "int32",
                        "type": "integer"
                      },
                      "partition": {
                        "description": "Partition",
                        "type": "string"
                      },
                      "user": {
                        "description": "User name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "user"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "coordinators": {
                  "description": "Accounts this user is a coordinator for",
                  "items": {
                    "properties": {
                      "direct": {
                        "description": "Indicates whether the coordinator was directly assigned to this account",
                        "type": "boolean"
                      },
                      "name": {
                        "description": "User name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "name"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "default": {
                  "properties": {
                    "account": {
                      "description": "Default Account",
                      "type": "string"
                    },
                    "wckey": {
                      "description": "Default WCKey",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "flags": {
                  "description": "Flags associated with user",
                  "items": {
                    "enum": [
                      "NONE",
                      "DELETED"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "User name",
                  "type": "string"
                },
                "old_name": {
                  "description": "Previous user name",
                  "type": "string"
                },
                "wckeys": {
                  "description": "List of available WCKeys",
                  "items": {
                    "properties": {
                      "accounting": {
                        "description": "Accounting records containing related resource usage",
                        "items": {
                          "properties": {
                            "TRES": {
                              "description": "Trackable resources",
                              "properties": {
                                "count": {
                                  "description": "TRES count (0 if listed generically)",
                                  "format": "int64",
                                  "type": "integer"
                                },
                                "id": {
                                  "description": "ID used in database",
                                  "format": "int32",
                                  "type": "integer"
                                },
                                "name": {
                                  "description": "TRES name (if applicable)",
                                  "type": "string"
                                },
                                "type": {
                                  "description": "TRES type (CPU, MEM, etc)",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "type"
                              ],
                              "type": "object"
                            },
                            "allocated": {
                              "properties": {
                                "seconds": {
                                  "description": "Number of cpu seconds allocated",
                                  "format": "int64",
                                  "type": "integer"
                                }
                              },
                              "type": "object"
                            },
                            "id": {
                              "description": "Association ID or Workload characterization key ID",
                              "format": "int32",
                              "type": "integer"
                            },
                            "start": {
                              "description": "When the record was started",
                              "format": "int64",
                              "type": "integer"
                            }
                          },
                          "required": [],
                          "type": "object"
                        },
                        "type": "array"
                      },
                      "cluster": {
                        "description": "Cluster name",
                        "type": "string"
                      },
                      "flags": {
                        "description": "Flags associated with the WCKey",
                        "items": {
                          "enum": [
                            "DELETED"
                          ],
                          "type": "string"
                        },
                        "type": "array"
                      },
                      "id": {
                        "description": "Unique ID for this user-cluster-wckey combination",
                        "format": "int32",
                        "type": "integer"
                      },
                      "name": {
                        "description": "WCKey name",
                        "type": "string"
                      },
                      "user": {
                        "description": "User name",
                        "type": "string"
                      }
                    },
                    "required": [
                      "cluster",
                      "name",
                      "user"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "users"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_wckey_removed_resp": {
        "properties": {
          "deleted_wckeys": {
            "description": "deleted wckeys",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "deleted_wckeys"
        ],
        "type": "object"
      },
      "v0.0.41_openapi_wckey_resp": {
        "properties": {
          "errors": {
            "description": "Query errors",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form error description",
                  "type": "string"
                },
                "error": {
                  "description": "Short form error description",
                  "type": "string"
                },
                "error_number": {
                  "description": "Slurm numeric error identifier",
                  "format": "int32",
                  "type": "integer"
                },
                "source": {
                  "description": "Source of error or where error was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "meta": {
            "description": "Slurm meta values",
            "properties": {
              "client": {
                "properties": {
                  "group": {
                    "description": "Client group (if known)",
                    "type": "string"
                  },
                  "source": {
                    "description": "Client source description",
                    "type": "string"
                  },
                  "user": {
                    "description": "Client user (if known)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "command": {
                "description": "CLI command (if applicable)",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "plugin": {
                "properties": {
                  "accounting_storage": {
                    "description": "Slurm accounting plugin",
                    "type": "string"
                  },
                  "data_parser": {
                    "description": "Slurm data_parser plugin",
                    "type": "string"
                  },
                  "name": {
                    "description": "Slurm plugin name (if applicable)",
                    "type": "string"
                  },
                  "type": {
                    "description": "Slurm plugin type (if applicable)",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "slurm": {
                "properties": {
                  "cluster": {
                    "description": "Slurm cluster name",
                    "type": "string"
                  },
                  "release": {
                    "description": "Slurm release string",
                    "type": "string"
                  },
                  "version": {
                    "properties": {
                      "major": {
                        "description": "Slurm release major version",
                        "type": "string"
                      },
                      "micro": {
                        "description": "Slurm release micro version",
                        "type": "string"
                      },
                      "minor": {
                        "description": "Slurm release minor version",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [],
            "type": "object"
          },
          "warnings": {
            "description": "Query warnings",
            "items": {
              "properties": {
                "description": {
                  "description": "Long form warning description",
                  "type": "string"
                },
                "source": {
                  "description": "Source of warning or where warning was first detected",
                  "type": "string"
                }
              },
              "required": [],
              "type": "object"
            },
            "type": "array"
          },
          "wckeys": {
            "description": "wckeys",
            "items": {
              "properties": {
                "accounting": {
                  "description": "Accounting records containing related resource usage",
                  "items": {
                    "properties": {
                      "TRES": {
                        "description": "Trackable resources",
                        "properties": {
                          "count": {
                            "description": "TRES count (0 if listed generically)",
                            "format": "int64",
                            "type": "integer"
                          },
                          "id": {
                            "description": "ID used in database",
                            "format": "int32",
                            "type": "integer"
                          },
                          "name": {
                            "description": "TRES name (if applicable)",
                            "type": "string"
                          },
                          "type": {
                            "description": "TRES type (CPU, MEM, etc)",
                            "type": "string"
                          }
                        },
                        "required": [
                          "type"
                        ],
                        "type": "object"
                      },
                      "allocated": {
                        "properties": {
                          "seconds": {
                            "description": "Number of cpu seconds allocated",
                            "format": "int64",
                            "type": "integer"
                          }
                        },
                        "type": "object"
                      },
                      "id": {
                        "description": "Association ID or Workload characterization key ID",
                        "format": "int32",
                        "type": "integer"
                      },
                      "start": {
                        "description": "When the record was started",
                        "format": "int64",
                        "type": "integer"
                      }
                    },
                    "required": [],
                    "type": "object"
                  },
                  "type": "array"
                },
                "cluster": {
                  "description": "Cluster name",
                  "type": "string"
                },
                "flags": {
                  "description": "Flags associated with the WCKey",
                  "items": {
                    "enum": [
                      "DELETED"
                    ],
                    "type": "string"
                  },
                  "type": "array"
                },
                "id": {
                  "description": "Unique ID for this user-cluster-wckey combination",
                  "format": "int32",
                  "type": "integer"
                },
                "name": {
                  "description": "WCKey name",
                  "type": "string"
                },
                "user": {
                  "description": "User name",
                  "type": "string"
                }
              },
              "required": [
                "cluster",
                "name",
                "user"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "wckeys"
        ],
        "type": "object"
      },
      "v0.0.41_update_node_msg": {
        "properties": {
          "address": {
            "description": "NodeAddr, used to establish a communication path",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "comment": {
            "description": "Arbitrary comment",
            "type": "string"
          },
          "cpu_bind": {
            "description": "Default method for binding tasks to allocated CPUs",
            "format": "int32",
            "type": "integer"
          },
          "extra": {
            "description": "Arbitrary string used for node filtering if extra constraints are enabled",
            "type": "string"
          },
          "features": {
            "description": "Available features",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "features_act": {
            "description": "Currently active features",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "gres": {
            "description": "Generic resources",
            "type": "string"
          },
          "hostname": {
            "description": "NodeHostname",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "NodeName",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "reason": {
            "description": "Reason for node being DOWN or DRAINING",
            "type": "string"
          },
          "reason_uid": {
            "description": "User ID to associate with the reason (needed if user root is sending message)",
            "type": "string"
          },
          "resume_after": {
            "description": "Number of seconds after which to automatically resume DOWN or DRAINED node",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int32",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          },
          "state": {
            "description": "New state to assign to the node",
            "items": {
              "enum": [
                "INVALID",
                "UNKNOWN",
                "DOWN",
                "IDLE",
                "ALLOCATED",
                "ERROR",
                "MIXED",
                "FUTURE",
                "RESERVED",
                "UNDRAIN",
                "CLOUD",
                "RESUME",
                "DRAIN",
                "COMPLETING",
                "NOT_RESPONDING",
                "POWERED_DOWN",
                "FAIL",
                "POWERING_UP",
                "MAINTENANCE",
                "REBOOT_REQUESTED",
                "REBOOT_CANCELED",
                "POWERING_DOWN",
                "DYNAMIC_FUTURE",
                "REBOOT_ISSUED",
                "PLANNED",
                "INVALID_REG",
                "POWER_DOWN",
                "POWER_UP",
                "POWER_DRAIN",
                "DYNAMIC_NORM"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "weight": {
            "description": "Weight of the node for scheduling purposes",
            "properties": {
              "infinite": {
                "description": "True if number has been set to infinite; \"set\" and \"number\" will be ignored",
                "type": "boolean"
              },
              "number": {
                "description": "If \"set\" is True the number will be set with value; otherwise ignore number contents",
                "format": "int32",
                "type": "integer"
              },
              "set": {
                "description": "True if number has been set; False if number is unset",
                "type": "boolean"
              }
            },
            "required": [],
            "type": "object"
          }
        },
        "required": [],
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "description": "Bearer Authentication",
        "scheme": "bearer",
        "type": "http"
      },
      "token": {
        "description": "User access token",
        "in": "header",
        "name": "X-SLURM-USER-TOKEN",
        "type": "apiKey"
      },
      "user": {
        "description": "User name",
        "in": "header",
        "name": "X-SLURM-USER-NAME",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "contact": {
      "email": "sales@schedmd.com",
      "name": "SchedMD LLC",
      "url": "https://www.schedmd.com/"
    },
    "description": "API to access and control Slurm",
    "license": {
      "name": "Apache-2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "termsOfService": "https://github.com/SchedMD/slurm/blob/master/DISCLAIMER",
    "title": "Slurm REST API",
    "version": "Slurm-24.11.5&openapi/slurmdbd&openapi/slurmctld"
  },
  "openapi": "3.0.3",
  "paths": {
    "/slurm/v0.0.41/diag/": {
      "get": {
        "operationId": "slurm_v0041_get_diag",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_diag_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_diag_resp"
                }
              }
            },
            "description": "diagnostic results"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_diag_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_diag_resp"
                }
              }
            },
            "description": "diagnostic results"
          }
        },
        "summary": "get diagnostics",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/job/allocate": {
      "post": {
        "operationId": "slurm_v0041_post_job_allocate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_job_alloc_req"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_job_alloc_req"
              }
            }
          },
          "description": "Job allocation description"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_alloc_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_alloc_resp"
                }
              }
            },
            "description": "job allocation response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_alloc_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_alloc_resp"
                }
              }
            },
            "description": "job allocation response"
          }
        },
        "summary": "submit new job allocation without any steps that must be signaled to stop",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/job/submit": {
      "post": {
        "operationId": "slurm_v0041_post_job_submit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_job_submit_req"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_job_submit_req"
              }
            }
          },
          "description": "Job description"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_submit_response"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_submit_response"
                }
              }
            },
            "description": "job submission response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_submit_response"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_submit_response"
                }
              }
            },
            "description": "job submission response"
          }
        },
        "summary": "submit new job",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/job/{job_id}": {
      "delete": {
        "operationId": "slurm_v0041_delete_job",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Job ID",
            "explode": false,
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Signal to send to Job",
            "explode": false,
            "in": "query",
            "name": "signal",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Signalling flags",
            "explode": false,
            "in": "query",
            "name": "flags",
            "required": false,
            "schema": {
              "enum": [
                "BATCH_JOB",
                "ARRAY_TASK",
                "FULL_STEPS_ONLY",
                "FULL_JOB",
                "FEDERATION_REQUEUE",
                "HURRY",
                "OUT_OF_MEMORY",
                "NO_SIBLING_JOBS",
                "RESERVATION_JOB",
                "VERBOSE",
                "CRON_JOBS",
                "WARNING_SENT"
              ],
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "job signal result"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "job signal result"
          }
        },
        "summary": "cancel or signal job",
        "tags": [
          "slurm"
        ]
      },
      "get": {
        "operationId": "slurm_v0041_get_job",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Job ID",
            "explode": false,
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Filter jobs since update timestamp",
            "explode": false,
            "in": "query",
            "name": "update_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Query flags",
            "explode": false,
            "in": "query",
            "name": "flags",
            "required": false,
            "schema": {
              "enum": [
                "ALL",
                "DETAIL",
                "MIXED",
                "LOCAL",
                "SIBLING",
                "FEDERATION",
                "FUTURE"
              ],
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_info_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_info_resp"
                }
              }
            },
            "description": "job(s) information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_info_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_info_resp"
                }
              }
            },
            "description": "job(s) information"
          }
        },
        "summary": "get job info",
        "tags": [
          "slurm"
        ]
      },
      "post": {
        "operationId": "slurm_v0041_post_job",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Job ID",
            "explode": false,
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_job_desc_msg"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_job_desc_msg"
              }
            }
          },
          "description": "Job update description"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_post_response"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_post_response"
                }
              }
            },
            "description": "job update result"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_post_response"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_post_response"
                }
              }
            },
            "description": "job update result"
          }
        },
        "summary": "update job",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/jobs/": {
      "delete": {
        "operationId": "slurm_v0041_delete_jobs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_kill_jobs_msg"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_kill_jobs_msg"
              }
            }
          },
          "description": "Signal or cancel jobs"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_kill_jobs_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_kill_jobs_resp"
                }
              }
            },
            "description": "description of jobs to signal"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_kill_jobs_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_kill_jobs_resp"
                }
              }
            },
            "description": "description of jobs to signal"
          }
        },
        "summary": "send signal to list of jobs",
        "tags": [
          "slurm"
        ]
      },
      "get": {
        "operationId": "slurm_v0041_get_jobs",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Filter jobs since update timestamp",
            "explode": false,
            "in": "query",
            "name": "update_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Query flags",
            "explode": false,
            "in": "query",
            "name": "flags",
            "required": false,
            "schema": {
              "enum": [
                "ALL",
                "DETAIL",
                "MIXED",
                "LOCAL",
                "SIBLING",
                "FEDERATION",
                "FUTURE"
              ],
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_info_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_info_resp"
                }
              }
            },
            "description": "job(s) information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_info_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_info_resp"
                }
              }
            },
            "description": "job(s) information"
          }
        },
        "summary": "get list of jobs",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/jobs/state/": {
      "get": {
        "operationId": "slurm_v0041_get_jobs_state",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Search for CSV list of Job IDs",
            "explode": false,
            "in": "query",
            "name": "job_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_info_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_info_resp"
                }
              }
            },
            "description": "job(s) state information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_info_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_job_info_resp"
                }
              }
            },
            "description": "job(s) state information"
          }
        },
        "summary": "get list of job states",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/licenses/": {
      "get": {
        "operationId": "slurm_v0041_get_licenses",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_licenses_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_licenses_resp"
                }
              }
            },
            "description": "results of get all licenses"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_licenses_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_licenses_resp"
                }
              }
            },
            "description": "results of get all licenses"
          }
        },
        "summary": "get all Slurm tracked license info",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/node/{node_name}": {
      "delete": {
        "operationId": "slurm_v0041_delete_node",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Node name",
            "explode": false,
            "in": "path",
            "name": "node_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "node delete request result"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "node delete request result"
          }
        },
        "summary": "delete node",
        "tags": [
          "slurm"
        ]
      },
      "get": {
        "operationId": "slurm_v0041_get_node",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Node name",
            "explode": false,
            "in": "path",
            "name": "node_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Filter jobs since update timestamp",
            "explode": false,
            "in": "query",
            "name": "update_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Query flags",
            "explode": false,
            "in": "query",
            "name": "flags",
            "required": false,
            "schema": {
              "enum": [
                "ALL",
                "DETAIL",
                "MIXED",
                "LOCAL",
                "SIBLING",
                "FEDERATION",
                "FUTURE"
              ],
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_nodes_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_nodes_resp"
                }
              }
            },
            "description": "node information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_nodes_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_nodes_resp"
                }
              }
            },
            "description": "node information"
          }
        },
        "summary": "get node info",
        "tags": [
          "slurm"
        ]
      },
      "post": {
        "operationId": "slurm_v0041_post_node",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Node name",
            "explode": false,
            "in": "path",
            "name": "node_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_update_node_msg"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_update_node_msg"
              }
            }
          },
          "description": "Node update description"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "node update request result"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "node update request result"
          }
        },
        "summary": "update node properties",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/nodes/": {
      "get": {
        "operationId": "slurm_v0041_get_nodes",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Filter jobs since update timestamp",
            "explode": false,
            "in": "query",
            "name": "update_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Query flags",
            "explode": false,
            "in": "query",
            "name": "flags",
            "required": false,
            "schema": {
              "enum": [
                "ALL",
                "DETAIL",
                "MIXED",
                "LOCAL",
                "SIBLING",
                "FEDERATION",
                "FUTURE"
              ],
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_nodes_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_nodes_resp"
                }
              }
            },
            "description": "node(s) information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_nodes_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_nodes_resp"
                }
              }
            },
            "description": "node(s) information"
          }
        },
        "summary": "get node(s) info",
        "tags": [
          "slurm"
        ]
      },
      "post": {
        "operationId": "slurm_v0041_post_nodes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_update_node_msg"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_update_node_msg"
              }
            }
          },
          "description": "Nodelist update description"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "batch node update request result"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "batch node update request result"
          }
        },
        "summary": "batch update node(s)",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/partition/{partition_name}": {
      "get": {
        "operationId": "slurm_v0041_get_partition",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Partition name",
            "explode": false,
            "in": "path",
            "name": "partition_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Filter partitions since update timestamp",
            "explode": false,
            "in": "query",
            "name": "update_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Query flags",
            "explode": false,
            "in": "query",
            "name": "flags",
            "required": false,
            "schema": {
              "enum": [
                "ALL",
                "DETAIL",
                "MIXED",
                "LOCAL",
                "SIBLING",
                "FEDERATION",
                "FUTURE"
              ],
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_partition_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_partition_resp"
                }
              }
            },
            "description": "partition information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_partition_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_partition_resp"
                }
              }
            },
            "description": "partition information"
          }
        },
        "summary": "get partition info",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/partitions/": {
      "get": {
        "operationId": "slurm_v0041_get_partitions",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Filter partitions since update timestamp",
            "explode": false,
            "in": "query",
            "name": "update_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Query flags",
            "explode": false,
            "in": "query",
            "name": "flags",
            "required": false,
            "schema": {
              "enum": [
                "ALL",
                "DETAIL",
                "MIXED",
                "LOCAL",
                "SIBLING",
                "FEDERATION",
                "FUTURE"
              ],
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_partition_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_partition_resp"
                }
              }
            },
            "description": "partition information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_partition_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_partition_resp"
                }
              }
            },
            "description": "partition information"
          }
        },
        "summary": "get all partition info",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/ping/": {
      "get": {
        "operationId": "slurm_v0041_get_ping",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_ping_array_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_ping_array_resp"
                }
              }
            },
            "description": "results of ping test"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_ping_array_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_ping_array_resp"
                }
              }
            },
            "description": "results of ping test"
          }
        },
        "summary": "ping test",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/reconfigure/": {
      "get": {
        "operationId": "slurm_v0041_get_reconfigure",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "reconfigure request result"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "reconfigure request result"
          }
        },
        "summary": "request slurmctld reconfigure",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/reservation/{reservation_name}": {
      "get": {
        "operationId": "slurm_v0041_get_reservation",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Reservation name",
            "explode": false,
            "in": "path",
            "name": "reservation_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Filter reservations since update timestamp",
            "explode": false,
            "in": "query",
            "name": "update_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_reservation_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_reservation_resp"
                }
              }
            },
            "description": "reservation information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_reservation_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_reservation_resp"
                }
              }
            },
            "description": "reservation information"
          }
        },
        "summary": "get reservation info",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/reservations/": {
      "get": {
        "operationId": "slurm_v0041_get_reservations",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Filter reservations since update timestamp",
            "explode": false,
            "in": "query",
            "name": "update_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_reservation_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_reservation_resp"
                }
              }
            },
            "description": "reservation information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_reservation_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_reservation_resp"
                }
              }
            },
            "description": "reservation information"
          }
        },
        "summary": "get all reservation info",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurm/v0.0.41/shares": {
      "get": {
        "operationId": "slurm_v0041_get_shares",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Accounts to query",
            "explode": false,
            "in": "query",
            "name": "accounts",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Users to query",
            "explode": false,
            "in": "query",
            "name": "users",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_shares_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_shares_resp"
                }
              }
            },
            "description": "shares information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_shares_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_shares_resp"
                }
              }
            },
            "description": "shares information"
          }
        },
        "summary": "get fairshare info",
        "tags": [
          "slurm"
        ]
      }
    },
    "/slurmdb/v0.0.41/account/{account_name}": {
      "delete": {
        "operationId": "slurmdb_v0041_delete_account",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Account name",
            "explode": false,
            "in": "path",
            "name": "account_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_removed_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_removed_resp"
                }
              }
            },
            "description": "Status of account deletion request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_removed_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_removed_resp"
                }
              }
            },
            "description": "Status of account deletion request"
          }
        },
        "summary": "Delete account",
        "tags": [
          "slurmdb"
        ]
      },
      "get": {
        "operationId": "slurmdb_v0041_get_account",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Account name",
            "explode": false,
            "in": "path",
            "name": "account_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include associations",
            "explode": false,
            "in": "query",
            "name": "with_assocs",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include coordinators",
            "explode": false,
            "in": "query",
            "name": "with_coords",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include deleted",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_resp"
                }
              }
            },
            "description": "List of accounts"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_resp"
                }
              }
            },
            "description": "List of accounts"
          }
        },
        "summary": "Get account info",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/accounts/": {
      "get": {
        "operationId": "slurmdb_v0041_get_accounts",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV description list",
            "explode": false,
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "include deleted associations",
            "explode": false,
            "in": "query",
            "name": "DELETED",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "query includes associations",
            "explode": false,
            "in": "query",
            "name": "WithAssociations",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "query includes coordinators",
            "explode": false,
            "in": "query",
            "name": "WithCoordinators",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "remove users as coordinators",
            "explode": false,
            "in": "query",
            "name": "NoUsersAreCoords",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "users are coordinators",
            "explode": false,
            "in": "query",
            "name": "UsersAreCoords",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_resp"
                }
              }
            },
            "description": "List of accounts"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_resp"
                }
              }
            },
            "description": "List of accounts"
          }
        },
        "summary": "Get account list",
        "tags": [
          "slurmdb"
        ]
      },
      "post": {
        "operationId": "slurmdb_v0041_post_accounts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_accounts_resp"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_accounts_resp"
              }
            }
          },
          "description": "Description of accounts to update/create"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "Status of account update request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "Status of account update request"
          }
        },
        "summary": "Add/update list of accounts",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/accounts_association/": {
      "post": {
        "operationId": "slurmdb_v0041_post_accounts_association",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_accounts_add_cond_resp"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_accounts_add_cond_resp"
              }
            }
          },
          "description": "Add list of accounts with conditional association"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_add_cond_resp_str"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_add_cond_resp_str"
                }
              }
            },
            "description": "Status of account addition request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_add_cond_resp_str"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_accounts_add_cond_resp_str"
                }
              }
            },
            "description": "Status of account addition request"
          }
        },
        "summary": "Add accounts with conditional association",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/association/": {
      "delete": {
        "operationId": "slurmdb_v0041_delete_association",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV accounts list",
            "explode": false,
            "in": "query",
            "name": "account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV clusters list",
            "explode": false,
            "in": "query",
            "name": "cluster",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS list",
            "explode": false,
            "in": "query",
            "name": "default_qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV id list",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Filter to only defaults",
            "explode": false,
            "in": "query",
            "name": "only_defaults",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV names of parent account",
            "explode": false,
            "in": "query",
            "name": "parent_account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV partition name list",
            "explode": false,
            "in": "query",
            "name": "partition",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS list",
            "explode": false,
            "in": "query",
            "name": "qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage end (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_end",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage start (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_start",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV user list",
            "explode": false,
            "in": "query",
            "name": "user",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include usage",
            "explode": false,
            "in": "query",
            "name": "with_usage",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include deleted associations",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include a raw qos or delta_qos",
            "explode": false,
            "in": "query",
            "name": "with_raw_qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include sub acct information",
            "explode": false,
            "in": "query",
            "name": "with_sub_accts",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Exclude parent id/name",
            "explode": false,
            "in": "query",
            "name": "without_parent_info",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Exclude limits from parents",
            "explode": false,
            "in": "query",
            "name": "without_parent_limits",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_removed_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_removed_resp"
                }
              }
            },
            "description": "Status of associations delete request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_removed_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_removed_resp"
                }
              }
            },
            "description": "Status of associations delete request"
          }
        },
        "summary": "Delete association",
        "tags": [
          "slurmdb"
        ]
      },
      "get": {
        "operationId": "slurmdb_v0041_get_association",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV accounts list",
            "explode": false,
            "in": "query",
            "name": "account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV clusters list",
            "explode": false,
            "in": "query",
            "name": "cluster",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS list",
            "explode": false,
            "in": "query",
            "name": "default_qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV id list",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Filter to only defaults",
            "explode": false,
            "in": "query",
            "name": "only_defaults",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV names of parent account",
            "explode": false,
            "in": "query",
            "name": "parent_account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV partition name list",
            "explode": false,
            "in": "query",
            "name": "partition",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS list",
            "explode": false,
            "in": "query",
            "name": "qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage end (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_end",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage start (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_start",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV user list",
            "explode": false,
            "in": "query",
            "name": "user",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include usage",
            "explode": false,
            "in": "query",
            "name": "with_usage",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include deleted associations",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include a raw qos or delta_qos",
            "explode": false,
            "in": "query",
            "name": "with_raw_qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include sub acct information",
            "explode": false,
            "in": "query",
            "name": "with_sub_accts",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Exclude parent id/name",
            "explode": false,
            "in": "query",
            "name": "without_parent_info",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Exclude limits from parents",
            "explode": false,
            "in": "query",
            "name": "without_parent_limits",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_resp"
                }
              }
            },
            "description": "List of associations"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_resp"
                }
              }
            },
            "description": "List of associations"
          }
        },
        "summary": "Get association info",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/associations/": {
      "delete": {
        "operationId": "slurmdb_v0041_delete_associations",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV accounts list",
            "explode": false,
            "in": "query",
            "name": "account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV clusters list",
            "explode": false,
            "in": "query",
            "name": "cluster",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS list",
            "explode": false,
            "in": "query",
            "name": "default_qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV id list",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Filter to only defaults",
            "explode": false,
            "in": "query",
            "name": "only_defaults",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV names of parent account",
            "explode": false,
            "in": "query",
            "name": "parent_account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV partition name list",
            "explode": false,
            "in": "query",
            "name": "partition",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS list",
            "explode": false,
            "in": "query",
            "name": "qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage end (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_end",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage start (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_start",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV user list",
            "explode": false,
            "in": "query",
            "name": "user",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include usage",
            "explode": false,
            "in": "query",
            "name": "with_usage",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include deleted associations",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include a raw qos or delta_qos",
            "explode": false,
            "in": "query",
            "name": "with_raw_qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include sub acct information",
            "explode": false,
            "in": "query",
            "name": "with_sub_accts",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Exclude parent id/name",
            "explode": false,
            "in": "query",
            "name": "without_parent_info",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Exclude limits from parents",
            "explode": false,
            "in": "query",
            "name": "without_parent_limits",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_removed_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_removed_resp"
                }
              }
            },
            "description": "List of associations deleted"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_removed_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_removed_resp"
                }
              }
            },
            "description": "List of associations deleted"
          }
        },
        "summary": "Delete associations",
        "tags": [
          "slurmdb"
        ]
      },
      "get": {
        "operationId": "slurmdb_v0041_get_associations",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV accounts list",
            "explode": false,
            "in": "query",
            "name": "account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV clusters list",
            "explode": false,
            "in": "query",
            "name": "cluster",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS list",
            "explode": false,
            "in": "query",
            "name": "default_qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV id list",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Filter to only defaults",
            "explode": false,
            "in": "query",
            "name": "only_defaults",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV names of parent account",
            "explode": false,
            "in": "query",
            "name": "parent_account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV partition name list",
            "explode": false,
            "in": "query",
            "name": "partition",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS list",
            "explode": false,
            "in": "query",
            "name": "qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage end (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_end",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage start (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_start",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV user list",
            "explode": false,
            "in": "query",
            "name": "user",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include usage",
            "explode": false,
            "in": "query",
            "name": "with_usage",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include deleted associations",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include a raw qos or delta_qos",
            "explode": false,
            "in": "query",
            "name": "with_raw_qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include sub acct information",
            "explode": false,
            "in": "query",
            "name": "with_sub_accts",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Exclude parent id/name",
            "explode": false,
            "in": "query",
            "name": "without_parent_info",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Exclude limits from parents",
            "explode": false,
            "in": "query",
            "name": "without_parent_limits",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_resp"
                }
              }
            },
            "description": "List of associations"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_assocs_resp"
                }
              }
            },
            "description": "List of associations"
          }
        },
        "summary": "Get association list",
        "tags": [
          "slurmdb"
        ]
      },
      "post": {
        "operationId": "slurmdb_v0041_post_associations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_assocs_resp"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_assocs_resp"
              }
            }
          },
          "description": "Job description"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "status of associations update"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "status of associations update"
          }
        },
        "summary": "Set associations info",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/cluster/{cluster_name}": {
      "delete": {
        "operationId": "slurmdb_v0041_delete_cluster",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Cluster name",
            "explode": false,
            "in": "path",
            "name": "cluster_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Type of machine",
            "explode": false,
            "in": "query",
            "name": "classification",
            "required": false,
            "schema": {
              "enum": [
                "UNCLASSIFIED",
                "CAPABILITY",
                "CAPACITY",
                "CAPAPACITY (both CAPABILITY and CAPACITY)"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV cluster list",
            "explode": false,
            "in": "query",
            "name": "cluster",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV federation list",
            "explode": false,
            "in": "query",
            "name": "federation",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Query flags",
            "explode": false,
            "in": "query",
            "name": "flags",
            "required": false,
            "schema": {
              "enum": [
                "REGISTERING",
                "MULTIPLE_SLURMD",
                "FRONT_END",
                "FEDERATION",
                "EXTERNAL"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV RPC version list",
            "explode": false,
            "in": "query",
            "name": "rpc_version",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage end (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_end",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage start (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_start",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include deleted clusters",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include usage",
            "explode": false,
            "in": "query",
            "name": "with_usage",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_clusters_removed_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_clusters_removed_resp"
                }
              }
            },
            "description": "Result of delete cluster request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_clusters_removed_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_clusters_removed_resp"
                }
              }
            },
            "description": "Result of delete cluster request"
          }
        },
        "summary": "Delete cluster",
        "tags": [
          "slurmdb"
        ]
      },
      "get": {
        "operationId": "slurmdb_v0041_get_cluster",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Cluster name",
            "explode": false,
            "in": "path",
            "name": "cluster_name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Type of machine",
            "explode": false,
            "in": "query",
            "name": "classification",
            "required": false,
            "schema": {
              "enum": [
                "UNCLASSIFIED",
                "CAPABILITY",
                "CAPACITY",
                "CAPAPACITY (both CAPABILITY and CAPACITY)"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV cluster list",
            "explode": false,
            "in": "query",
            "name": "cluster",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV federation list",
            "explode": false,
            "in": "query",
            "name": "federation",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Query flags",
            "explode": false,
            "in": "query",
            "name": "flags",
            "required": false,
            "schema": {
              "enum": [
                "REGISTERING",
                "MULTIPLE_SLURMD",
                "FRONT_END",
                "FEDERATION",
                "EXTERNAL"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV RPC version list",
            "explode": false,
            "in": "query",
            "name": "rpc_version",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage end (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_end",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage start (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_start",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include deleted clusters",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include usage",
            "explode": false,
            "in": "query",
            "name": "with_usage",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_clusters_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_clusters_resp"
                }
              }
            },
            "description": "Cluster information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_clusters_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_clusters_resp"
                }
              }
            },
            "description": "Cluster information"
          }
        },
        "summary": "Get cluster info",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/clusters/": {
      "get": {
        "operationId": "slurmdb_v0041_get_clusters",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Filter reservations since update timestamp",
            "explode": false,
            "in": "query",
            "name": "update_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_clusters_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_clusters_resp"
                }
              }
            },
            "description": "List of clusters"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_clusters_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_clusters_resp"
                }
              }
            },
            "description": "List of clusters"
          }
        },
        "summary": "Get cluster list",
        "tags": [
          "slurmdb"
        ]
      },
      "post": {
        "operationId": "slurmdb_v0041_post_clusters",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Filter reservations since update timestamp",
            "explode": false,
            "in": "query",
            "name": "update_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_clusters_resp"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_clusters_resp"
              }
            }
          },
          "description": "Cluster add or update descriptions"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "Result of modify clusters request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "Result of modify clusters request"
          }
        },
        "summary": "Get cluster list",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/config": {
      "get": {
        "operationId": "slurmdb_v0041_get_config",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_config_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_config_resp"
                }
              }
            },
            "description": "slurmdbd configuration"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_config_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_config_resp"
                }
              }
            },
            "description": "slurmdbd configuration"
          }
        },
        "summary": "Dump all configuration information",
        "tags": [
          "slurmdb"
        ]
      },
      "post": {
        "operationId": "slurmdb_v0041_post_config",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_config_resp"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_config_resp"
              }
            }
          },
          "description": "Add or update config"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "slurmdbd configuration"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "slurmdbd configuration"
          }
        },
        "summary": "Load all configuration information",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/diag/": {
      "get": {
        "operationId": "slurmdb_v0041_get_diag",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_stats_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_stats_resp"
                }
              }
            },
            "description": "Dictionary of statistics"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_stats_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_stats_resp"
                }
              }
            },
            "description": "Dictionary of statistics"
          }
        },
        "summary": "Get slurmdb diagnostics",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/instance/": {
      "get": {
        "operationId": "slurmdb_v0041_get_instance",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV clusters list",
            "explode": false,
            "in": "query",
            "name": "cluster",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV extra list",
            "explode": false,
            "in": "query",
            "name": "extra",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV instance_id list",
            "explode": false,
            "in": "query",
            "name": "instance_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV instance_type list",
            "explode": false,
            "in": "query",
            "name": "instance_type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ranged node string",
            "explode": false,
            "in": "query",
            "name": "node_list",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Time end (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "time_end",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Time start (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "time_start",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_instances_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_instances_resp"
                }
              }
            },
            "description": "List of instances"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_instances_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_instances_resp"
                }
              }
            },
            "description": "List of instances"
          }
        },
        "summary": "Get instance info",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/instances/": {
      "get": {
        "operationId": "slurmdb_v0041_get_instances",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV clusters list",
            "explode": false,
            "in": "query",
            "name": "cluster",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV extra list",
            "explode": false,
            "in": "query",
            "name": "extra",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV instance_id list",
            "explode": false,
            "in": "query",
            "name": "instance_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV instance_type list",
            "explode": false,
            "in": "query",
            "name": "instance_type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ranged node string",
            "explode": false,
            "in": "query",
            "name": "node_list",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Time end (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "time_end",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Time start (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "time_start",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_instances_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_instances_resp"
                }
              }
            },
            "description": "List of instances"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_instances_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_instances_resp"
                }
              }
            },
            "description": "List of instances"
          }
        },
        "summary": "Get instance list",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/job/{job_id}": {
      "get": {
        "description": "This endpoint may return multiple job entries since job_id is not a unique key - only the tuple (cluster, job_id, start_time) is unique. If the requested job_id is a component of a heterogeneous job all components are returned.",
        "operationId": "slurmdb_v0041_get_job",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Job id",
            "explode": false,
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_jobs_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_jobs_resp"
                }
              }
            },
            "description": "Job description"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_jobs_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_jobs_resp"
                }
              }
            },
            "description": "Job description"
          }
        },
        "summary": "Get job info",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/jobs/": {
      "get": {
        "operationId": "slurmdb_v0041_get_jobs",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV account list",
            "explode": false,
            "in": "query",
            "name": "account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV association list",
            "explode": false,
            "in": "query",
            "name": "association",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV cluster list",
            "explode": false,
            "in": "query",
            "name": "cluster",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV constraint list",
            "explode": false,
            "in": "query",
            "name": "constraints",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Schedule bits not set",
            "explode": false,
            "in": "query",
            "name": "scheduler_unset",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Job was started on submit",
            "explode": false,
            "in": "query",
            "name": "scheduled_on_submit",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Job was started from main scheduler",
            "explode": false,
            "in": "query",
            "name": "scheduled_by_main",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Job was started from backfill",
            "explode": false,
            "in": "query",
            "name": "scheduled_by_backfill",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Job start RPC was received",
            "explode": false,
            "in": "query",
            "name": "job_started",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Job exit code (numeric)",
            "explode": false,
            "in": "query",
            "name": "exit_code",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include duplicate job entries",
            "explode": false,
            "in": "query",
            "name": "show_duplicates",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Exclude job step details",
            "explode": false,
            "in": "query",
            "name": "skip_steps",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Do not truncate the time to usage_start and usage_end",
            "explode": false,
            "in": "query",
            "name": "disable_truncate_usage_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include details on all hetjob components",
            "explode": false,
            "in": "query",
            "name": "whole_hetjob",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Only show details on specified hetjob components",
            "explode": false,
            "in": "query",
            "name": "disable_whole_hetjob",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Tell dbd not to wait for the result",
            "explode": false,
            "in": "query",
            "name": "disable_wait_for_result",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Use usage_time as the submit_time of the job",
            "explode": false,
            "in": "query",
            "name": "usage_time_as_submit_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include job script",
            "explode": false,
            "in": "query",
            "name": "show_batch_script",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include job environment",
            "explode": false,
            "in": "query",
            "name": "show_job_environment",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV group list",
            "explode": false,
            "in": "query",
            "name": "groups",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV job name list",
            "explode": false,
            "in": "query",
            "name": "job_name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV partition name list",
            "explode": false,
            "in": "query",
            "name": "partition",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS name list",
            "explode": false,
            "in": "query",
            "name": "qos",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV reason list",
            "explode": false,
            "in": "query",
            "name": "reason",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV reservation name list",
            "explode": false,
            "in": "query",
            "name": "reservation",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV reservation ID list",
            "explode": false,
            "in": "query",
            "name": "reservation_id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV state list",
            "explode": false,
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV step id list",
            "explode": false,
            "in": "query",
            "name": "step",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage end (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "end_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage start (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "start_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ranged node string where jobs ran",
            "explode": false,
            "in": "query",
            "name": "node",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV user name list",
            "explode": false,
            "in": "query",
            "name": "users",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV wckey list",
            "explode": false,
            "in": "query",
            "name": "wckey",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_jobs_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_jobs_resp"
                }
              }
            },
            "description": "List of jobs"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_jobs_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_jobs_resp"
                }
              }
            },
            "description": "List of jobs"
          }
        },
        "summary": "Get job list",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/qos/": {
      "get": {
        "operationId": "slurmdb_v0041_get_qos",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV description list",
            "explode": false,
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS id list",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS name list",
            "explode": false,
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "PreemptMode used when jobs in this QOS are preempted",
            "explode": false,
            "in": "query",
            "name": "preempt_mode",
            "required": false,
            "schema": {
              "enum": [
                "DISABLED",
                "SUSPEND",
                "REQUEUE",
                "CANCEL",
                "GANG"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include deleted QOS",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_resp"
                }
              }
            },
            "description": "List of QOS"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_resp"
                }
              }
            },
            "description": "List of QOS"
          }
        },
        "summary": "Get QOS list",
        "tags": [
          "slurmdb"
        ]
      },
      "post": {
        "operationId": "slurmdb_v0041_post_qos",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV description list",
            "explode": false,
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS id list",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV QOS name list",
            "explode": false,
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "PreemptMode used when jobs in this QOS are preempted",
            "explode": false,
            "in": "query",
            "name": "preempt_mode",
            "required": false,
            "schema": {
              "enum": [
                "DISABLED",
                "SUSPEND",
                "REQUEUE",
                "CANCEL",
                "GANG"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include deleted QOS",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_resp"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_resp"
              }
            }
          },
          "description": "Description of QOS to add or update"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "QOS update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "QOS update response"
          }
        },
        "summary": "Add or update QOSs",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/qos/{qos}": {
      "delete": {
        "operationId": "slurmdb_v0041_delete_single_qos",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "QOS name",
            "explode": false,
            "in": "path",
            "name": "qos",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_removed_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_removed_resp"
                }
              }
            },
            "description": "results of ping test"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_removed_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_removed_resp"
                }
              }
            },
            "description": "results of ping test"
          }
        },
        "summary": "Delete QOS",
        "tags": [
          "slurmdb"
        ]
      },
      "get": {
        "operationId": "slurmdb_v0041_get_single_qos",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "QOS name",
            "explode": false,
            "in": "path",
            "name": "qos",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Query includes deleted QOS",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_resp"
                }
              }
            },
            "description": "QOS information"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_slurmdbd_qos_resp"
                }
              }
            },
            "description": "QOS information"
          }
        },
        "summary": "Get QOS info",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/tres/": {
      "get": {
        "operationId": "slurmdb_v0041_get_tres",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_tres_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_tres_resp"
                }
              }
            },
            "description": "List of TRES"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_tres_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_tres_resp"
                }
              }
            },
            "description": "List of TRES"
          }
        },
        "summary": "Get TRES info",
        "tags": [
          "slurmdb"
        ]
      },
      "post": {
        "operationId": "slurmdb_v0041_post_tres",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_tres_resp"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_tres_resp"
              }
            }
          },
          "description": "TRES descriptions. Only works in developer mode."
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "TRES update result"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "TRES update result"
          }
        },
        "summary": "Add TRES",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/user/{name}": {
      "delete": {
        "operationId": "slurmdb_v0041_delete_user",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "User name",
            "explode": false,
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "Result of user delete request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "Result of user delete request"
          }
        },
        "summary": "Delete user",
        "tags": [
          "slurmdb"
        ]
      },
      "get": {
        "operationId": "slurmdb_v0041_get_user",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "User name",
            "explode": false,
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include deleted users",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include associations",
            "explode": false,
            "in": "query",
            "name": "with_assocs",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include coordinators",
            "explode": false,
            "in": "query",
            "name": "with_coords",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include wckeys",
            "explode": false,
            "in": "query",
            "name": "with_wckeys",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_users_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_users_resp"
                }
              }
            },
            "description": "List of users"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_users_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_users_resp"
                }
              }
            },
            "description": "List of users"
          }
        },
        "summary": "Get user info",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/users/": {
      "get": {
        "operationId": "slurmdb_v0041_get_users",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Administrator level",
            "explode": false,
            "in": "query",
            "name": "admin_level",
            "required": false,
            "schema": {
              "enum": [
                "Not Set",
                "None",
                "Operator",
                "Administrator"
              ],
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV default account list",
            "explode": false,
            "in": "query",
            "name": "default_account",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV default wckey list",
            "explode": false,
            "in": "query",
            "name": "default_wckey",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "With associations",
            "explode": false,
            "in": "query",
            "name": "with_assocs",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "With coordinators",
            "explode": false,
            "in": "query",
            "name": "with_coords",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "With deleted",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "With wckeys",
            "explode": false,
            "in": "query",
            "name": "with_wckeys",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Exclude defaults",
            "explode": false,
            "in": "query",
            "name": "without_defaults",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_users_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_users_resp"
                }
              }
            },
            "description": "List of users"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_users_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_users_resp"
                }
              }
            },
            "description": "List of users"
          }
        },
        "summary": "Get user list",
        "tags": [
          "slurmdb"
        ]
      },
      "post": {
        "operationId": "slurmdb_v0041_post_users",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_users_resp"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_users_resp"
              }
            }
          },
          "description": "add or update user"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "Status of user update request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "Status of user update request"
          }
        },
        "summary": "Update users",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/users_association/": {
      "post": {
        "operationId": "slurmdb_v0041_post_users_association",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Filter partitions since update timestamp",
            "explode": false,
            "in": "query",
            "name": "update_time",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Query flags",
            "explode": false,
            "in": "query",
            "name": "flags",
            "required": false,
            "schema": {
              "enum": [
                "ALL",
                "DETAIL",
                "MIXED",
                "LOCAL",
                "SIBLING",
                "FEDERATION",
                "FUTURE"
              ],
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_users_add_cond_resp"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_users_add_cond_resp"
              }
            }
          },
          "description": "Create users with conditional association"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_users_add_cond_resp_str"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_users_add_cond_resp_str"
                }
              }
            },
            "description": "Add list of users with conditional association"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_users_add_cond_resp_str"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_users_add_cond_resp_str"
                }
              }
            },
            "description": "Add list of users with conditional association"
          }
        },
        "summary": "Add users with conditional association",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/wckey/{id}": {
      "delete": {
        "operationId": "slurmdb_v0041_delete_wckey",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "wckey id",
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_wckey_removed_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_wckey_removed_resp"
                }
              }
            },
            "description": "Result of wckey deletion request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_wckey_removed_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_wckey_removed_resp"
                }
              }
            },
            "description": "Result of wckey deletion request"
          }
        },
        "summary": "Delete wckey",
        "tags": [
          "slurmdb"
        ]
      },
      "get": {
        "operationId": "slurmdb_v0041_get_wckey",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "wckey id",
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_wckey_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_wckey_resp"
                }
              }
            },
            "description": "Description of wckey"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_wckey_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_wckey_resp"
                }
              }
            },
            "description": "Description of wckey"
          }
        },
        "summary": "Get wckey info",
        "tags": [
          "slurmdb"
        ]
      }
    },
    "/slurmdb/v0.0.41/wckeys/": {
      "get": {
        "operationId": "slurmdb_v0041_get_wckeys",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV cluster name list",
            "explode": false,
            "in": "query",
            "name": "cluster",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV id list",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV name list",
            "explode": false,
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Only query defaults",
            "explode": false,
            "in": "query",
            "name": "only_defaults",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage end (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_end",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage start (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_start",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV user list",
            "explode": false,
            "in": "query",
            "name": "user",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include usage",
            "explode": false,
            "in": "query",
            "name": "with_usage",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include deleted wckeys",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_wckey_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_wckey_resp"
                }
              }
            },
            "description": "List of wckeys"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_wckey_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_wckey_resp"
                }
              }
            },
            "description": "List of wckeys"
          }
        },
        "summary": "Get wckey list",
        "tags": [
          "slurmdb"
        ]
      },
      "post": {
        "operationId": "slurmdb_v0041_post_wckeys",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV cluster name list",
            "explode": false,
            "in": "query",
            "name": "cluster",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Ignored; process JSON manually to control output format",
            "explode": false,
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV id list",
            "explode": false,
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV name list",
            "explode": false,
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Only query defaults",
            "explode": false,
            "in": "query",
            "name": "only_defaults",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage end (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_end",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "Usage start (UNIX timestamp)",
            "explode": false,
            "in": "query",
            "name": "usage_start",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "description": "CSV user list",
            "explode": false,
            "in": "query",
            "name": "user",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include usage",
            "explode": false,
            "in": "query",
            "name": "with_usage",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "description": "Include deleted wckeys",
            "explode": false,
            "in": "query",
            "name": "with_deleted",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_wckey_resp"
              }
            },
            "application/yaml": {
              "schema": {
                "$ref": "#/components/schemas/v0.0.41_openapi_wckey_resp"
              }
            }
          },
          "description": "wckeys description"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "Result of wckey addition or update request"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              },
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/v0.0.41_openapi_resp"
                }
              }
            },
            "description": "Result of wckey addition or update request"
          }
        },
        "summary": "Add or update wckeys",
        "tags": [
          "slurmdb"
        ]
      }
    }
  },
  "security": [
    {
      "token": [],
      "user": []
    },
    {
      "token": []
    },
    {
      "bearerAuth": []
    },
    {}
  ],
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "description": "methods that query slurmctld",
      "name": "slurm"
    },
    {
      "description": "methods that query slurmdbd",
      "name": "slurmdb"
    },
    {
      "description": "methods that query for generated OpenAPI specifications",
      "name": "openapi"
    }
  ]
}
