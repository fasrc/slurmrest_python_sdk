# coding: utf-8

"""
    Slurm REST API

    API to access and control Slurm

    The version of the OpenAPI document: Slurm-24.11.5&openapi/slurmdbd&openapi/slurmctld
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.v0041_openapi_accounts_add_cond_resp_association_condition_association import V0041OpenapiAccountsAddCondRespAssociationConditionAssociation

class TestV0041OpenapiAccountsAddCondRespAssociationConditionAssociation(unittest.TestCase):
    """V0041OpenapiAccountsAddCondRespAssociationConditionAssociation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V0041OpenapiAccountsAddCondRespAssociationConditionAssociation:
        """Test V0041OpenapiAccountsAddCondRespAssociationConditionAssociation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V0041OpenapiAccountsAddCondRespAssociationConditionAssociation`
        """
        model = V0041OpenapiAccountsAddCondRespAssociationConditionAssociation()
        if include_optional:
            return V0041OpenapiAccountsAddCondRespAssociationConditionAssociation(
                comment = '',
                defaultqos = '',
                fairshare = 56,
                grpjobs = openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grpjobs.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grpjobs(
                    infinite = True, 
                    number = 56, 
                    set = True, ),
                grpjobsaccrue = openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grpjobsaccrue.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grpjobsaccrue(
                    infinite = True, 
                    number = 56, 
                    set = True, ),
                grpsubmitjobs = openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grpsubmitjobs.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grpsubmitjobs(
                    infinite = True, 
                    number = 56, 
                    set = True, ),
                grptres = [
                    openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner(
                        count = 56, 
                        id = 56, 
                        name = '', 
                        type = '', )
                    ],
                grptresmins = [
                    openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner(
                        count = 56, 
                        id = 56, 
                        name = '', 
                        type = '', )
                    ],
                grptresrunmins = [
                    openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner(
                        count = 56, 
                        id = 56, 
                        name = '', 
                        type = '', )
                    ],
                grpwall = openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grpwall.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grpwall(
                    infinite = True, 
                    number = 56, 
                    set = True, ),
                maxjobs = openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_maxjobs.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_maxjobs(
                    infinite = True, 
                    number = 56, 
                    set = True, ),
                maxjobsaccrue = openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_maxjobsaccrue.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_maxjobsaccrue(
                    infinite = True, 
                    number = 56, 
                    set = True, ),
                maxsubmitjobs = openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_maxsubmitjobs.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_maxsubmitjobs(
                    infinite = True, 
                    number = 56, 
                    set = True, ),
                maxtresminsperjob = [
                    openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner(
                        count = 56, 
                        id = 56, 
                        name = '', 
                        type = '', )
                    ],
                maxtresperjob = [
                    openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner(
                        count = 56, 
                        id = 56, 
                        name = '', 
                        type = '', )
                    ],
                maxtrespernode = [
                    openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner(
                        count = 56, 
                        id = 56, 
                        name = '', 
                        type = '', )
                    ],
                maxtresrunmins = [
                    openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_grptres_inner(
                        count = 56, 
                        id = 56, 
                        name = '', 
                        type = '', )
                    ],
                maxwalldurationperjob = openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_maxwalldurationperjob.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_maxwalldurationperjob(
                    infinite = True, 
                    number = 56, 
                    set = True, ),
                minpriothresh = openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_minpriothresh.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_minpriothresh(
                    infinite = True, 
                    number = 56, 
                    set = True, ),
                parent = '',
                priority = openapi_client.models.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_priority.v0_0_41_openapi_accounts_add_cond_resp_association_condition_association_priority(
                    infinite = True, 
                    number = 56, 
                    set = True, ),
                qoslevel = [
                    ''
                    ]
            )
        else:
            return V0041OpenapiAccountsAddCondRespAssociationConditionAssociation(
        )
        """

    def testV0041OpenapiAccountsAddCondRespAssociationConditionAssociation(self):
        """Test V0041OpenapiAccountsAddCondRespAssociationConditionAssociation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
